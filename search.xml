<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>linux</title>
      <link href="/2022/11/15/linux/"/>
      <url>/2022/11/15/linux/</url>
      
        <content type="html"><![CDATA[<h3 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h3><p>当shell断开时，当前进程终止，&amp; 放入后台运行，<code>nohup</code>保持运行</p><p><code>nohup command &amp;</code></p><p>默认情况下，该命令的所有输出都被重定向到<code>nohup.out</code>文件中。</p><h3 id="进程操作"><a href="#进程操作" class="headerlink" title="进程操作"></a>进程操作</h3><ul><li><code>ps </code>– 报告当前进程快照</li><li><code>top </code>– 显示任务</li><li><code>jobs </code>– 列出活跃的任务</li><li><code>bg </code>– 把一个任务放到后台执行</li><li><code>fg </code>– 把一个任务放到前台执行</li><li><code>kill </code>– 给一个进程发送信号</li><li><code>killall </code>– 杀死指定名字的进程</li><li><code>shutdown </code>– 关机或重启系统</li></ul><h3 id="查看cpu温度"><a href="#查看cpu温度" class="headerlink" title="查看cpu温度"></a>查看cpu温度</h3><p><code>cat /sys/class/thermal/thermal_zone0/temp</code></p><p><code>echo $[$(cat /sys/class/thermal/thermal_zone0/temp)/1000]&amp;deg</code></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python_fix</title>
      <link href="/2022/11/15/python-fix/"/>
      <url>/2022/11/15/python-fix/</url>
      
        <content type="html"><![CDATA[<h3 id="安装lxml"><a href="#安装lxml" class="headerlink" title="安装lxml"></a>安装lxml</h3><p>首先</p><p><code>pip3 install wheel</code></p><p>然后</p><p><code>sudo apt-get install libxml2-dev libxslt-dev python-dev</code></p><p>或</p><p><code>sudo apt-get install build-dep python3-lxml</code></p><p>最后</p><p><code>sudo apt-get install python-lxml</code></p><p>抓不到包就 <code>sudo apt-get install python3-lxml</code></p><h3 id="python-文件操作"><a href="#python-文件操作" class="headerlink" title="python 文件操作"></a>python 文件操作</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> shutil os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>path<span class="token punctuation">)</span>   <span class="token comment">#删除文件</span>os<span class="token punctuation">.</span>removedirs<span class="token punctuation">(</span>path<span class="token punctuation">)</span>   <span class="token comment">#删除空文件夹</span> os<span class="token punctuation">.</span>rmdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token comment">#删除空文件夹</span> shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    <span class="token comment">#递归删除文件夹，即：删除非空文件夹</span> <span class="token comment"># 新建文件</span><span class="token keyword">def</span> <span class="token function">mkdir</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span> folder <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token keyword">not</span> folder<span class="token punctuation">:</span>                   <span class="token comment">#判断是否存在文件夹如果不存在则创建为文件夹</span>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>path<span class="token punctuation">)</span>            <span class="token comment">#makedirs 创建文件时如果路径不存在会创建这个路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="python随机数"><a href="#python随机数" class="headerlink" title="python随机数"></a>python随机数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random <span class="token comment"># 产生 1 到 10 的一个整数型随机数</span><span class="token keyword">print</span><span class="token punctuation">(</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token comment"># 产生 0 到 1 之间的随机浮点数</span><span class="token keyword">print</span><span class="token punctuation">(</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>             <span class="token comment"># 产生  1.1 到 5.4 之间的随机浮点数，区间可以不是整数</span><span class="token keyword">print</span><span class="token punctuation">(</span> random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">1.1</span><span class="token punctuation">,</span><span class="token number">5.4</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>     <span class="token comment"># 从序列中随机选取一个元素</span><span class="token keyword">print</span><span class="token punctuation">(</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>   <span class="token comment"># 生成从1到100的间隔为2的随机整数</span><span class="token keyword">print</span><span class="token punctuation">(</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>   <span class="token comment"># 将序列a中的元素顺序打乱</span>a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>                random<span class="token punctuation">.</span>shuffle<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notag </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库绪论</title>
      <link href="/2022/11/12/shu-ju-ku-gai-lun/"/>
      <url>/2022/11/12/shu-ju-ku-gai-lun/</url>
      
        <content type="html"><![CDATA[<h2 id="数据库系统概述"><a href="#数据库系统概述" class="headerlink" title="数据库系统概述"></a><strong>数据库系统概述</strong></h2><hr><p><strong>四个基本概念</strong></p><p>数据(Data)、数据库(Database)、数据库管理系统(DBMS)、数据库系统(DBS)</p><p><strong>数据库</strong>(Database,简称<strong>DB</strong>)是<strong>长期储存</strong>在计算机内、<strong>有组织的</strong>、<strong>可共享的</strong> <strong>大量</strong>数据的集合。</p><p><strong>数据库的基本特征</strong></p><ul><li>数据按一定的数据模型组织、描述和储存</li><li>可为各种用户共享</li><li>冗余度较小</li><li>数据独立性较高</li><li>易扩展</li></ul><h2 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a><strong>数据模型</strong></h2><hr><p>####非关系模型</p><h5 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h5><ol><li><p>层次模型是数据库系统中最早出现的数据模型</p></li><li><p>层次模型用树形结构来表示各类实体以及实体间的联系</p></li><li><p>满足下面两个条件的基本层次联系的集合为层次模型</p><ul><li>有且只有一个结点没有双亲结点，这个结点称为根结点</li><li>根以外的其它结点有且只有一个双亲结点</li></ul></li><li><p>层次数据模型的存储结构</p><ol><li><p>邻接法</p><p>按照层次树前序遍历的顺序把所有记录值依次邻接存放，即通过物理空间的位置相邻来实现层次顺序</p></li><li><p>链接法</p><ul><li>用指针来反映数据之间的层次联系</li><li>子女－兄弟链接法</li><li>层次序列链接法</li></ul></li></ol></li></ol><h5 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h5><ol><li>网状数据库系统采用网状模型作为数据的组织方式</li><li>满足下面两个条件的基本层次联系的集合：<ul><li>允许一个以上的结点无双亲</li><li>一个结点可以有多于一个的双亲</li></ul></li></ol><p>####关系数据模型</p><p><strong>在用户观点下，关系模型中数据的逻辑结构式是一张二维表，它由行和列组成。</strong></p><h3 id="关系数据模型的数据结构"><a href="#关系数据模型的数据结构" class="headerlink" title="关系数据模型的数据结构"></a>关系数据模型的数据结构</h3><ol><li>关系：一个关系对应一张表</li><li>元组：表中的一行即为一个元组</li><li>属性：表中的一列即为一个属性</li><li>主码：表中的某个属性组，可以唯一确定一个元组</li><li>域：属性的取值范围</li><li>分量：元组中的一个属性值</li><li>关系模式：对关系的描述</li></ol><p><strong>关系必须是规范化的，满足一定的规范条件</strong></p><p>最基本的规范条件是：关系的每一个分量必须是一个不可分的数据项，不允许表中还有表。</p><h3 id="关系数据模型的操作与完整性约束"><a href="#关系数据模型的操作与完整性约束" class="headerlink" title="关系数据模型的操作与完整性约束"></a>关系数据模型的操作与完整性约束</h3><p><strong>数据操作是集合操作，操作对象和结果都是关系，即即若干元组的集合</strong></p><p>操作：增删查改</p><p><strong>关系的完整性约束条件</strong></p><ul><li>实体完整性</li><li>参照完整性</li><li>用户定义完整性</li></ul><h3 id="数据库系统模式"><a href="#数据库系统模式" class="headerlink" title="数据库系统模式"></a><strong>数据库系统模式</strong></h3><hr><p><strong>型 和值 的概念</strong></p><p>型：对某一类数据的结构和属性的说明</p><p>值：是型的一个具体赋值</p><p><strong>模式</strong></p><ul><li>数据库逻辑结构和特征的描述</li><li>是型的描述</li><li>反映的是数据的结构及其联系</li><li>模式是相对稳定的</li></ul><p><strong>实例</strong></p><ul><li>模式的一个具体值</li><li>反映数据库某一时刻的状态</li><li>同一个模式可以有很多实例</li><li>实例随数据库中的数据的更新而变动</li></ul><p><strong>数据库系统有三级模式结构</strong></p><ul><li>模式s</li><li>外模式</li><li>内模式</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim操作</title>
      <link href="/2022/11/12/vim/"/>
      <url>/2022/11/12/vim/</url>
      
        <content type="html"><![CDATA[<h2 id="vim配置文件"><a href="#vim配置文件" class="headerlink" title="vim配置文件"></a>vim配置文件</h2><p>在用户名目录下新建配置文件：<code>vim .vimrc</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> nocompatible <span class="token string">" 关闭 vi 兼容模式syntax on "</span> 自动语法高亮<span class="token builtin class-name">set</span> number <span class="token string">" 显示行号set cursorline "</span> 突出显示当前行<span class="token builtin class-name">set</span> ruler <span class="token string">" 打开状态栏标尺set shiftwidth=4 "</span> 设定 <span class="token operator">&lt;&lt;</span> 和 <span class="token operator">&gt;&gt;</span> 命令移动时的宽度为 <span class="token number">4</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">softtabstop</span><span class="token operator">=</span><span class="token number">4</span> <span class="token string">" 使得按退格键时可以一次删掉 4 个空格set tabstop=4 "</span> 设定 tab 长度为 <span class="token number">4</span><span class="token builtin class-name">set</span> nobackup <span class="token string">" 覆盖文件时不备份set autochdir "</span> 自动切换当前目录为当前文件所在的目录filetype plugin indent on <span class="token string">" 开启插件set backupcopy=yes "</span> 设置备份时的行为为覆盖<span class="token builtin class-name">set</span> ignorecase smartcase <span class="token string">" 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感set nowrapscan "</span> 禁止在搜索到文件两端时重新搜索<span class="token builtin class-name">set</span> incsearch <span class="token string">" 输入搜索内容时就显示搜索结果set hlsearch "</span> 搜索时高亮显示被找到的文本<span class="token builtin class-name">set</span> noerrorbells <span class="token string">" 关闭错误信息响铃set novisualbell "</span> 关闭使用可视响铃代替呼叫<span class="token builtin class-name">set</span> noeb vb <span class="token assign-left variable">t_vb</span><span class="token operator">=</span> <span class="token string">" 置空错误铃声的终端代码set showmatch "</span> 插入括号时，短暂地跳转到匹配的对应括号<span class="token builtin class-name">set</span> <span class="token assign-left variable">matchtime</span><span class="token operator">=</span><span class="token number">2</span> <span class="token string">" 短暂跳转到匹配括号的时间set magic "</span> 设置魔术<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vim-基础操作"><a href="#vim-基础操作" class="headerlink" title="vim 基础操作"></a>vim 基础操作</h2><ol><li>写入<ul><li>shift+i :行前写入</li><li>a: 下一个字符写入</li><li>shift+a : 行尾写入</li><li>o :下一行写入</li><li>shift+o: 上一行</li></ul></li><li>移动光标<ul><li>h 向前</li><li>j 下一行</li><li>k  上一行</li><li>l 向后</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Socket编程</title>
      <link href="/2022/11/10/socket-bian-cheng/"/>
      <url>/2022/11/10/socket-bian-cheng/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 服务器端</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;WinSock2.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>WSADATA wsa_data<span class="token punctuation">;</span><span class="token function">WSAStartup</span><span class="token punctuation">(</span><span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>wsa_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建socket</span>SOCKET server_socket<span class="token operator">=</span><span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 绑定</span>SOCKADDR_IN sock_add_in<span class="token punctuation">;</span>sock_add_in<span class="token punctuation">.</span>sin_family<span class="token operator">=</span>AF_INET<span class="token punctuation">;</span>sock_add_in<span class="token punctuation">.</span>sin_port<span class="token operator">=</span><span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 接受任意客户端请求，具体IP用inet_addr函数转换，端口用htons()</span>sock_add_in<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>S_un<span class="token punctuation">.</span>S_addr<span class="token operator">=</span>INADDR_ANY<span class="token punctuation">;</span><span class="token keyword">int</span> bind_result<span class="token operator">=</span><span class="token function">bind</span><span class="token punctuation">(</span>server_socket<span class="token punctuation">,</span><span class="token punctuation">(</span>SOCKADDR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>sock_add_in<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR_IN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>bind_result<span class="token operator">==</span>SOCKET_ERROR<span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"bind error"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 监听连接</span><span class="token comment">// socket对象,缓冲区长度</span><span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> listen_result<span class="token operator">=</span><span class="token function">listen</span><span class="token punctuation">(</span>server_socket<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>listen_result<span class="token operator">==</span>SOCKET_ERROR<span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"listen error"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 连接客户端</span>SOCKADDR_IN client_addr_in<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> client_len<span class="token operator">=</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR_IN<span class="token punctuation">)</span><span class="token punctuation">;</span>SOCKET client_socket<span class="token operator">=</span>INVALID_SOCKET<span class="token punctuation">;</span><span class="token comment">// 处理请求</span>client_socket <span class="token operator">=</span><span class="token function">accept</span><span class="token punctuation">(</span>server_socket<span class="token punctuation">,</span><span class="token punctuation">(</span>SOCKADDR<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>client_addr_in<span class="token punctuation">,</span><span class="token operator">&amp;</span>client_len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>client_socket<span class="token operator">==</span>INVALID_SOCKET<span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"client error"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 向客户端发送数据</span><span class="token keyword">char</span> message<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"Build TCP Connect."</span><span class="token punctuation">;</span><span class="token comment">//scanf("%s",&amp;message);</span><span class="token function">send</span><span class="token punctuation">(</span>client_socket<span class="token punctuation">,</span>message<span class="token punctuation">,</span><span class="token function">strnlen_s</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">closesocket</span><span class="token punctuation">(</span>server_socket<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//客户端</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;WinSock2.h&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>WSADATA wsa_data<span class="token punctuation">;</span><span class="token function">WSAStartup</span><span class="token punctuation">(</span><span class="token function">MAKEWORD</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>wsa_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建socket</span>SOCKET client_socket<span class="token operator">=</span><span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 连接服务器</span>SOCKADDR_IN sock_add_in<span class="token punctuation">;</span>sock_add_in<span class="token punctuation">.</span>sin_family<span class="token operator">=</span>AF_INET<span class="token punctuation">;</span>sock_add_in<span class="token punctuation">.</span>sin_port<span class="token operator">=</span><span class="token function">htons</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sock_add_in<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>S_un<span class="token punctuation">.</span>S_addr<span class="token operator">=</span><span class="token function">inet_addr</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> connect_result<span class="token operator">=</span><span class="token function">connect</span><span class="token punctuation">(</span>client_socket<span class="token punctuation">,</span><span class="token punctuation">(</span>sockaddr<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>sock_add_in<span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SOCKADDR_IN<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>connect_result<span class="token operator">==</span>SOCKET_ERROR<span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"connect error"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//接收数据</span><span class="token keyword">char</span> message<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> recv_len<span class="token operator">=</span><span class="token function">recv</span><span class="token punctuation">(</span>client_socket<span class="token punctuation">,</span>message<span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>recv_len<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"recv message: "</span><span class="token operator">&lt;&lt;</span>message<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">WSACleanup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应用层</title>
      <link href="/2022/11/09/ying-yong-ceng/"/>
      <url>/2022/11/09/ying-yong-ceng/</url>
      
        <content type="html"><![CDATA[<p>##网络应用例子</p><p>E-mail、Web、文本消息、远程登陆、P2P文件共享、网络游戏、电话会议…</p><h2 id="创建网络应用"><a href="#创建网络应用" class="headerlink" title="创建网络应用"></a>创建网络应用</h2><p>编程 -&gt; 网络</p><h2 id="网络应用的体系结构"><a href="#网络应用的体系结构" class="headerlink" title="网络应用的体系结构"></a>网络应用的体系结构</h2><ul><li><p>客户-服务器（c/s模式）</p></li><li><p>双对等（P2P模式）</p></li><li><p>Napster(混合模式)</p><p>客户向服务器注册，并经过服务器请求其它客户资源</p><p>应用：即时通信</p></li></ul><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><p>客户端进程：发起通信的进程</p><p>服务器进程：等待连接的进程</p><p>P2P也有客户端进程和服务器进程之分</p><h2 id="通信需要解决的问题"><a href="#通信需要解决的问题" class="headerlink" title="通信需要解决的问题"></a>通信需要解决的问题</h2><ol><li><p>进程标识和寻址</p><p>主机IP -&gt; UDP\TCP -&gt; 端口</p></li><li><p>传输层-应用层如何提供服务</p><p><strong>层间接口的信息</strong>：</p><ol><li>报文 SDU</li><li>谁传的：对方应用进程的标识 : IP+TCP(UDP) 端口</li><li>传给谁: 对方应用进程的标识 : 对方的IP+TCP(UDP) 端口号</li></ol><p><strong>传输层实体</strong>：TCP\UDP 根据上述信息对报文段进行封装</p><ol><li>源端口号、目标端口号、数据等</li><li>将IP地址往下交IP实体，用于封装IP数据报</li></ol><p>层间传输信息时，每次携带太多信息，不易管理，使用<strong>socket（套接字）可以标识通信双方或单方</strong>。socket用一个<strong>整数</strong>表示两个应用实体之间的通信关系，属于本地标识。</p><ol><li>TCP socket包含（四元组）源IP，源端口，目标IP，目标端口。TCP socket代表一个会话关系。</li><li>UDP socket : 两个进程通信无需建立连接。二元组：源端指定的IP和port，目标地址在发送时指定</li></ol></li><li><p>如何使用传输层提供的服务，实现应用进程间的报文交换</p><p>定义应用层协议规范。</p></li></ol><p>TCP和UDP都不加密，采用明文传输。在TCP之上，实现的SSL协议可以提供加密的TCP连接。SSL可以实现端到端的鉴别。</p><h2 id="Web与HTTP"><a href="#Web与HTTP" class="headerlink" title="Web与HTTP"></a>Web与HTTP</h2><p>Web页:包含有一个基本的HTML文件，该基本HTML文件又包含若干对象的应用（链接）。</p><p>HTTP：超文本传输协议,web的应用层协议。使用TCP。端口80为守候Soket，当有客户端请求时，产生指向该用户会话的新Soket(建立套接字)。HTTP不维护客户信息，是无状态的。</p><h3 id="响应时间模型"><a href="#响应时间模型" class="headerlink" title="响应时间模型"></a>响应时间模型</h3><p>**RTT **: 往返时间</p><p>响应时间： 一个RTT用来发起<strong>TCP请求</strong>，一个<strong>RTT用来HTTP</strong>请求并等待HTTP响应，文件传输时间。一共<strong>2RTT + 传输时间</strong></p><h3 id="cs状态维护-cookies"><a href="#cs状态维护-cookies" class="headerlink" title="cs状态维护 cookies"></a>cs状态维护 cookies</h3><p>组成部分：</p><ol><li>在HTTP响应报文中有一个cookies的首部行</li><li>在HTTP请求报文中有一个cookies的首部行</li><li>在用户端系统中保留有一个cookie文件，由用户浏览器管理</li><li>在Web站点有一个后端数据库</li></ol><p>在cs请求响应时携带之前保存的cookie，从而达到维护用户状态的目的。</p><h3 id="Web缓存（代理服务器）"><a href="#Web缓存（代理服务器）" class="headerlink" title="Web缓存（代理服务器）"></a>Web缓存（代理服务器）</h3><p>不访问原始服务器，就满足客户的请求（先访问代理服务器，不命中再访问原始服务器）。缓存即是服务器也是客户端。</p><p>问题：当源服务器文件发生修改时，代理服务器缓存的文件不能及时更新。</p><p>解决：HTTP响应头部的Last-Modified字段记录了文件最后一次被修改的时间。当文件被修改时，响应整个文件，反之则只响应头部。</p><h2 id="FTP-文件传输协议"><a href="#FTP-文件传输协议" class="headerlink" title="FTP 文件传输协议"></a>FTP 文件传输协议</h2><h2 id="E-mail"><a href="#E-mail" class="headerlink" title="E-mail"></a>E-mail</h2><p>主要组成部分：用户代理、邮件服务器、简单邮件传输协议SMTP</p><p>用户代理(邮件阅读器)：撰写、编辑、阅读邮件。输入输出邮件保存在服务器上。</p><p>用户代理 —SMTP—&gt; 邮件服务器—SMTP—&gt; 邮件服务器—POP3、IMAP、HTTP—&gt;用户代理</p><h2 id="DNS-域名解析"><a href="#DNS-域名解析" class="headerlink" title="DNS (域名解析)"></a>DNS (域名解析)</h2><p>给浏览器提供域名到IP地址的解析。运行在UDP之上端口为53的应用服务。</p><p>IP地址标识主机、路由器，但IP地址不好记忆，不便人类使用。web -&gt; DNS -&gt; ftp</p><p>DNS域名结构：DNS采用层次树状结构命名方法。共有13个根名字服务器。internet根被划分为几百个顶级域。</p><ol><li>通用（generic)：  .com   .edu  .gov  .net  .org</li><li>国家的（countries）:  .cn  .us  .nl  .jp</li></ol><p>每个（子）域下面可以划分为若干个子域，树叶是主机。</p><h4 id="P2P应用"><a href="#P2P应用" class="headerlink" title="P2P应用"></a>P2P应用</h4><p>cs模式和P2p模式在文件分发中的区别。将一个大小为F的文件分发给N个客户端耗时：  U 带宽</p><p>cs模式：$D_{c-s}\ge max{NF/U_s,F/d_{min}}$  耗时随N线性增加</p><p>P2P模式：$D_{p2p}\ge max{F/U_s,F/d_{min},NF/(U_s+\sum U_i)}$  耗时随N加速下载</p><h5 id="P2P分类"><a href="#P2P分类" class="headerlink" title="P2P分类"></a>P2P分类</h5><ul><li><p>非结构化 P2P             节点关系任意</p><ul><li><p>集中化目录</p><p>客户端向中心服务器注册本地资源，中心服务器向客户端响应拥有请求资源的其他客户端</p></li><li><p>完全分布式</p><p>泛洪式</p></li><li><p>混合体</p><p>组内集中，组间泛洪。每组设有组长。</p></li></ul></li><li><p>结构化（DsHT) P2P    节点关系有序</p></li></ul><p>###视频流化服务和CDN：上下文</p><p>视频：固定速度显示的图像序列，数字化图像式像素的阵列，每个像素被若干bits表示。</p><h4 id="多媒体流化服务：DASH"><a href="#多媒体流化服务：DASH" class="headerlink" title="多媒体流化服务：DASH"></a>多媒体流化服务：DASH</h4><p>可以动态选择请求不同的质量的块。</p><p>服务器：</p><ul><li>将视频文件分割成多个块</li><li>每个块独立存储，编码于不同码率</li><li>告示文件（manifest file）: 提供不同块的URL</li></ul><p>客户端：</p><ul><li>先获取告示文件</li><li>周期性地测量服务器到客户端的带宽</li><li>查询告示文件，在一个时刻请求一个块，HTTP头部指定字节范围<ul><li>带宽足够则选择最大码率的视频块</li><li>会话的不同时刻可以切换请求不同的编码块</li></ul></li></ul><h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><p>通过CDN全网部署缓存节点，存储服务内容，就近为用户提供服务，提高用户体验。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 应用层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存非连续分配管理方式</title>
      <link href="/2022/11/06/fen-ye-cun-chu-guan-li/"/>
      <url>/2022/11/06/fen-ye-cun-chu-guan-li/</url>
      
        <content type="html"><![CDATA[<h3 id="基本分页管理"><a href="#基本分页管理" class="headerlink" title="基本分页管理"></a>基本分页管理</h3><p>将内存空间分为一个个大小相等的小分区，每个分区就是一个“页框”、“页帧”、“内存块”、“物理块”，页框一般比较小。每个页框都有一个编号，即“页框号”。将用户进程的地址也分为与页框大小相等的一个个区域，称为“页”或“页面”，每个页面也有一个编号，即“页号”。</p><blockquote><p>如何实现地址的转换？</p></blockquote><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202211061958007.png" alt="地址的转换"></p><p>为了能知道进程的每个页面在内存中从存放的位置，操作系统要为每个进程建立一张页表。进程的每一页对应一个页表项，每个页表项由页号和快好==块号组成，页表记录进程页面和实际存放的内存块之间的对应关系。</p><h4 id="基本地址变换机构"><a href="#基本地址变换机构" class="headerlink" title="基本地址变换机构"></a>基本地址变换机构</h4><p>用于实现逻辑地址到物理地址转换的一组硬件机构</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202211062015881.png" alt="image-20221106201413261"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存基础</title>
      <link href="/2022/11/06/nei-cun-ji-chu/"/>
      <url>/2022/11/06/nei-cun-ji-chu/</url>
      
        <content type="html"><![CDATA[<h3 id="源代码到程序运行"><a href="#源代码到程序运行" class="headerlink" title="源代码到程序运行"></a>源代码到程序运行</h3><p><strong>编辑源代码 -&gt; 编译 -&gt; 链接 -&gt; 装入</strong></p><h3 id="内存的装入方式"><a href="#内存的装入方式" class="headerlink" title="内存的装入方式"></a>内存的装入方式</h3><ul><li><p>绝对装入</p><p>指令种的储存地址使用绝对地址，只适用于单道程序环境。</p></li><li><p>静态重定位</p><p>装入时对地址进行<strong>重定位</strong>，在一个作业装入内存时，必须分配其要求的全部内存空间，如果没有足够的内存，就不能装入该作业。在运行期间作业不可移动，不可再申请内存空间。</p></li><li><p>动态重定位</p><p>把地址转换推迟到程序要运行时执行，装入内存的所有地址仍然是逻辑地址，这种方式需要一个<strong>重定位寄存器</strong>*。</p></li></ul><h3 id="链接的三种方式"><a href="#链接的三种方式" class="headerlink" title="链接的三种方式"></a>链接的三种方式</h3><ul><li>静态链接</li><li>装入时动态链接</li><li>运行时动态链接</li></ul><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><ul><li>内存空间的分配与回收</li><li>从逻辑上对内存空间进行扩充</li><li>负责程序的逻辑地址与物理地址的转换</li><li>内存保护<ol><li>在CPU上设置上下寄存器</li><li>采用重定位寄存器、界地址寄存器</li></ol></li></ul><h3 id="内存虚拟扩充"><a href="#内存虚拟扩充" class="headerlink" title="内存虚拟扩充"></a>内存虚拟扩充</h3><ul><li><p>覆盖技术</p><p>将程序分段，内存分为固定区、覆盖区。</p><p>缺点：系统不知道程序调用结构，必须由程序员声明调用结构，对用户不透明。</p></li><li><p>交换技术</p><p>将某些进程暂时换出外存（挂起）。进程在内存和磁盘动态调度。PCB常驻内存。</p></li></ul><h3 id="内存的分配与回收-连续分配"><a href="#内存的分配与回收-连续分配" class="headerlink" title="内存的分配与回收(连续分配)"></a>内存的分配与回收(连续分配)</h3><h4 id="单一连续分配"><a href="#单一连续分配" class="headerlink" title="单一连续分配"></a>单一连续分配</h4><p>内存 分为系统区和用户区。实现简单，无外部碎片，可采用覆盖技术扩充内存。只能用于单用户、单任务，有内部碎片，存储器利用率极低。</p><h4 id="固定分区分配"><a href="#固定分区分配" class="headerlink" title="固定分区分配"></a>固定分区分配</h4><p>将用户空间划分位若干个(相等或不相等)固定大小的分区，每个分区只装入一道作业。</p><p>操作系统需要建立<strong>分区说明表</strong>，每个表项包括对应分区的大小、起始地址、状态。实现简单，无外部碎片。有内部碎片，内存利用率低。</p><h4 id="动态分区分配与回收"><a href="#动态分区分配与回收" class="headerlink" title="动态分区分配与回收"></a>动态分区分配与回收</h4><p>在装入内存时根据进程大小动态的建立分区。采用空闲分区表或者空闲分区链两种数据结构记录内存的使用情况。内存回收时将空闲分区表(链)更新(合并相邻分区)。</p><h4 id="动态分区分配算法"><a href="#动态分区分配算法" class="headerlink" title="动态分区分配算法"></a>动态分区分配算法</h4><ol><li><p>首次适应算法</p><p>空闲分区链按地址递增排列，<strong>每次从低地址开始查找</strong>，找到第一个能满足大小的空闲分区。</p></li><li><p>最佳使用算法</p><p>优先使用更小的空闲分区。</p></li><li><p>最坏适应算法</p><p>空闲分区按容量递减次序链接，按顺序查找第一个满足要求的空闲分区链。</p></li><li><p>邻近适应算法</p><p>空闲分区链按地址递增排列，<strong>每次从上次检查位置开始检查</strong>满足要求的分区。</p></li></ol><h3 id="内存的分配与回收-非连续分配"><a href="#内存的分配与回收-非连续分配" class="headerlink" title="内存的分配与回收(非连续分配)"></a>内存的分配与回收(非连续分配)</h3><ol><li>基本分页存储管理</li><li>基本分段存储管理</li><li>段页式存储管理</li></ol>]]></content>
      
      
      <categories>
          
          <category> 操作系统基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数运算</title>
      <link href="/2022/11/04/da-shu-yun-suan/"/>
      <url>/2022/11/04/da-shu-yun-suan/</url>
      
        <content type="html"><![CDATA[<h3 id="大数加法"><a href="#大数加法" class="headerlink" title="大数加法"></a>大数加法</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*  大数加法 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>string a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span><span class="token keyword">int</span> up <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">/*  若a长于b,则a与b互换 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>string s_temp<span class="token punctuation">;</span>s_temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> s_temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*  由a和b的低位2依次向高位相加，记录进位 */</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> temp<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c <span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span> <span class="token operator">+</span> c <span class="token operator">+</span> up<span class="token punctuation">;</span><span class="token comment">// eg. '8'-'0'=8</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>up <span class="token operator">=</span> temp <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 最高位进位</span><span class="token keyword">if</span> <span class="token punctuation">(</span>up<span class="token punctuation">)</span> <span class="token punctuation">{</span>a <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>up<span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">;</span><span class="token comment">// '8'+'0' = 104</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="大数减法"><a href="#大数减法" class="headerlink" title="大数减法"></a>大数减法</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*  大数减法 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>string a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span><span class="token keyword">int</span> up <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>string oper<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">/*  若a小于b,则a与b互换 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>string s_temp<span class="token punctuation">;</span>s_temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> s_temp<span class="token punctuation">;</span>oper<span class="token operator">=</span><span class="token string">"-"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*  由a和b的低位2依次向高位相减，记录借位 */</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> temp<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c <span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span> <span class="token operator">-</span> c <span class="token operator">+</span> up <span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>up <span class="token operator">=</span> temp <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>up<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>up<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>up<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 去除前面的0</span><span class="token punctuation">}</span><span class="token comment">// 符号位</span>a <span class="token operator">=</span> oper <span class="token operator">+</span> a<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="大数乘法"><a href="#大数乘法" class="headerlink" title="大数乘法"></a>大数乘法</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*  大数乘法  模拟手算 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token comment">// 大数加法</span>string <span class="token function">a_and_b</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> string b<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> up <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">/*  若a长于b,则a与b互换 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>string s_temp<span class="token punctuation">;</span>s_temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> s_temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*  由a和b的低位2依次向高位相加，记录进位 */</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> temp<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>c <span class="token operator">=</span> b<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>temp <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span> <span class="token operator">+</span> c <span class="token operator">+</span> up<span class="token punctuation">;</span><span class="token comment">// eg. '8'-'0'=8</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>up <span class="token operator">=</span> temp <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 最高位进位</span><span class="token keyword">if</span> <span class="token punctuation">(</span>up<span class="token punctuation">)</span> <span class="token punctuation">{</span>a <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>up<span class="token punctuation">)</span> <span class="token operator">+</span> a<span class="token punctuation">;</span><span class="token comment">// '8'+'0' = 104</span><span class="token punctuation">}</span><span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>string a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">;</span>cin <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span><span class="token keyword">int</span> up <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>string oper <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment">/*  若a短于b,则a与b互换 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>string s_temp<span class="token punctuation">;</span>s_temp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> s_temp<span class="token punctuation">;</span>oper <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*  b由低位向高位依次与a各位相乘 */</span>string ans <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>string temp2 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>up <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// 重置进位</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//计算b的某一位与a的乘积</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> up <span class="token punctuation">;</span>temp2 <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> temp2<span class="token punctuation">;</span>up <span class="token operator">=</span> t <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>up<span class="token punctuation">)</span> temp2 <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>up<span class="token punctuation">)</span> <span class="token operator">+</span> temp2<span class="token punctuation">;</span><span class="token comment">// 添加最高位的进位</span>string <span class="token function">zuoyi</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">,</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把本次结果依次左移</span>ans <span class="token operator">=</span> <span class="token function">a_and_b</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> temp2 <span class="token operator">+</span> zuoyi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将本次计算结果与之前的结果相加</span><span class="token punctuation">}</span>cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/2022/11/01/ji-suan-ji-wang-luo/"/>
      <url>/2022/11/01/ji-suan-ji-wang-luo/</url>
      
        <content type="html"><![CDATA[<p>tcp:可靠性高</p><p>TCP:可靠性高</p><p>UDP:实时性好​</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>神奇字符串</title>
      <link href="/2022/10/31/shen-qi-zi-fu-chuan/"/>
      <url>/2022/10/31/shen-qi-zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>神奇字符串 s 仅由 ‘1’ 和 ‘2’ 组成，并需要遵守下面的规则：</p><p>神奇字符串 s 的神奇之处在于，串联字符串中 ‘1’ 和 ‘2’ 的连续出现次数可以生成该字符串。<br>s 的前几个元素是 s = “1221121221221121122……” 。如果将 s 中连续的若干 1 和 2 进行分组，可以得到 “1 22 11 2 1 22 1 22 11 2 11 22 ……” 。每组中 1 或者 2 的出现次数分别是 “1 2 2 1 1 2 1 2 2 1 2 2 ……” 。上面的出现次数正是 s 自身。</p><p>给你一个整数 n ，返回在神奇字符串 s 的前 n 个数字中 1 的数目。</p></blockquote><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>构造字符串，逐一计数。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">magicalString</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        string s<span class="token operator">=</span><span class="token string">"122"</span><span class="token punctuation">;</span><span class="token comment">//初始字符串的值</span>        <span class="token keyword">char</span> next<span class="token operator">=</span><span class="token char">'1'</span><span class="token punctuation">;</span><span class="token comment">//下一组字符的值</span>        <span class="token keyword">int</span> sum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//’1‘的个数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                s<span class="token operator">+=</span>next<span class="token punctuation">;</span><span class="token comment">//当标记为为1时，sum++且说明下一组字符数为1个</span>                sum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                s<span class="token operator">+=</span>next<span class="token punctuation">;</span><span class="token comment">////当标记为为2时，说明下一组字符数为2个</span>                s<span class="token operator">+=</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            next<span class="token operator">=</span><span class="token punctuation">(</span>next<span class="token operator">==</span><span class="token char">'1'</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token char">'2'</span><span class="token operator">:</span><span class="token char">'1'</span><span class="token punctuation">;</span><span class="token comment">//下一组的字符，1和2交替赋值</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题解原链接：<a href="https://leetcode.cn/problems/magical-string/">481. 神奇字符串 - 力扣（LeetCode）</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>和至少为 K 的最短子数组</title>
      <link href="/2022/10/26/he-zhi-shao-wei-k-de-zui-duan-zi-shu-zu/"/>
      <url>/2022/10/26/he-zhi-shao-wei-k-de-zui-duan-zi-shu-zu/</url>
      
        <content type="html"><![CDATA[<blockquote><p>给你一个整数数组 nums 和一个整数 k ，找出 nums 中和至少为 k 的 最短非空子数组 ，并返回该子数组的长度。如果不存在这样的 子数组 ，返回 -1 。子数组 是数组中 连续 的一部分。</p></blockquote><p>1、使用前缀和计算一段子序列的和，更加快捷</p><p>2、使用deque数据结构存储记录前缀和索引，方便从队头队尾操作数据</p><p>3、计算前缀和时，仍然时暴力解法，时间复杂度是O($n^2$)，所以在查询前缀和时需要优化。</p><p>详细思路：<a href="https://leetcode.cn/problems/shortest-subarray-with-sum-at-least-k/solution/liang-zhang-tu-miao-dong-dan-diao-dui-li-9fvh/">两张图秒懂单调队列</a></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">{</span>public<span class="token operator">:</span><span class="token keyword">int</span> <span class="token function">shortestSubarray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">long</span> s<span class="token punctuation">[</span>ans<span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token comment">//前缀和数组,int有可能溢出，选用long</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> deque<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> cur <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> cur <span class="token operator">-</span> s<span class="token punctuation">[</span>deque<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment">//删除找到最短子序列之后的前缀和，因为后面的前缀和到现在的front都比现在长</span>ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> i <span class="token operator">-</span> deque<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>deque<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>deque<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> cur <span class="token operator">&lt;</span> s<span class="token punctuation">[</span>deque<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">/*  删除队列(递增)最后比现在前缀和大的，因为后面的前缀和减队列中最大的满足条件  那么减去现在较小的仍然满足条件而且当前的距离更短 */</span>deque<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>deque<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> ans <span class="token operator">&gt;</span> n <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬楼梯问题</title>
      <link href="/2022/10/26/pa-lou-ti-wen-ti/"/>
      <url>/2022/10/26/pa-lou-ti-wen-ti/</url>
      
        <content type="html"><![CDATA[<blockquote><p>每次只能上一个或者两个台阶，给定台阶数，求共有多少种上法</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>到第n个台阶时，前一步有两种上法（一个台阶或者两个台阶），分别对应着第n-1个台阶和第n-2个台阶，所以n个台阶的上法是第n-1个台阶和n-2台阶上法之和。依次类推可发现这是一个递推公式。</p><blockquote><p>f(n)=f(n-1)+f(n-2)</p></blockquote><p>解法一：暴力递归</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*  暴力递归  大量重复计算，递归层太深 */</span> <span class="token keyword">int</span> <span class="token function">palouti</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">palouti</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">palouti</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解法二：使用map记录部分值，避免重复计算</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*  使用map记录部分递归的值，减少重复计算 */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unordered_map&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">palouti2</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> map<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token keyword">auto</span> it<span class="token operator">=</span>map<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token operator">!=</span>map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> it<span class="token operator">-&gt;</span>second<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>map<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">palouti2</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">palouti2</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> map<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后用45做测试，解法一用时<strong>4.035s</strong>，解法二用时<strong>0.0229s</strong>。由此可以看出，一个好的算法有多么重要。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器人学导论(二)</title>
      <link href="/2022/10/26/ji-qi-ren-xue-dao-lun-er/"/>
      <url>/2022/10/26/ji-qi-ren-xue-dao-lun-er/</url>
      
        <content type="html"><![CDATA[<h2 id="旋转矩阵与转角"><a href="#旋转矩阵与转角" class="headerlink" title="旋转矩阵与转角"></a>旋转矩阵与转角</h2><p>上一节提到了利用旋转矩阵解决刚体沿着坐标轴旋转的问题，这种方法也可以解决一般的转动。</p><p>首先要知道的是空间中的旋转也可以像空间中位置的变化一样，分别拆解到坐标轴的三个方向，但要注意的是，空间位置的变化是没有顺序的，比如先向X轴方向移动两个单位长度，在向Y轴方向移动两个单位长度，最终的位置是一样的，但这并不适用于空间旋转。</p><h2 id="转角的两种拆解方式"><a href="#转角的两种拆解方式" class="headerlink" title="转角的两种拆解方式"></a>转角的两种拆解方式</h2><ol><li><p>对方向固定不动的转轴旋转（外旋）：Fixed angles</p><p><strong>已知旋转角求旋转矩阵</strong></p><p>刚体相对世界坐标开始旋转，先转的轴右乘。刚体通过三个坐标轴的旋转既可以变换为空间中的任意姿态。</p><p> <img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221026104709195.png" alt="先后对X轴、Y轴、Z轴转动"></p><p>通过下面式子的推导，也可以说明空间中的转动是有顺序的，转动顺序交换，最后的结果也不相同。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221026105239074.png" alt="转角推导公式"></p><p><strong>已知旋转角度求旋转角(逆向运动)</strong></p><p>$$<br>{^A_BR}<em>{YXZ}(\alpha,\beta,\gamma)=<br>\begin{bmatrix}<br>r11 &amp;&amp; r12 &amp;&amp; r13 \<br>r21 &amp;&amp; r22 &amp;&amp; r23 \<br>r31 &amp;&amp; r32 &amp;&amp; r33<br>\end{bmatrix}<br>\<br>if,\beta\ne90^\circ \quad \beta=A\tan2(-r</em>{31},\sqrt{r_{11}^2,+r_{21}^2})  \<br>\alpha=A\tan2(r_{21}/c\beta,r_{11}/c\beta) \<br>\gamma=A\tan2(r_32/c\beta,r_{33}/c\beta)\<br>if , \beta=90^\circ \quad \alpha=0 \quad \gamma=Atan2(r_{12},r_{22})\<br>if , \beta=-90^\circ \quad \alpha=0 \quad \gamma=-Atan2(r_{12},r_{22})<br>$$</p></li><li><p>对转动的刚体当下所在转轴方向旋转（内旋）：Euler angles</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 机器人学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器人学 </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器人学导论(一)</title>
      <link href="/2022/10/25/ji-qi-ren-xue-dao-lun-yi/"/>
      <url>/2022/10/25/ji-qi-ren-xue-dao-lun-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="刚体运动状态描述"><a href="#刚体运动状态描述" class="headerlink" title="刚体运动状态描述"></a>刚体运动状态描述</h2><h3 id="平面上需要三个自由度去描述刚体的运动。"><a href="#平面上需要三个自由度去描述刚体的运动。" class="headerlink" title="平面上需要三个自由度去描述刚体的运动。"></a>平面上需要三个自由度去描述刚体的运动。</h3><blockquote><p>x 轴，y轴，旋转角 $\theta$</p></blockquote><h3 id="空间上需要六个自由度取描述刚体运动"><a href="#空间上需要六个自由度取描述刚体运动" class="headerlink" title="空间上需要六个自由度取描述刚体运动"></a>空间上需要六个自由度取描述刚体运动</h3><blockquote><p>x,y,z确定空间位置，$\theta、\lambda、\phi$表示空间中的三个旋转方向</p></blockquote><p>但是这样的表示方法比较复杂，所以引入世界坐标和物体坐标系，用物体坐标系的远点代表物体位置，物体坐标系相对世界坐标系的姿态表示刚体的转动状态。将刚体坐标系轨迹记录下来，然后对时间微分和二次微分即可得到刚体的速度、加速度等信息。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025210313050.png" alt="image-20221025210313050"></p><h3 id="刚体运动"><a href="#刚体运动" class="headerlink" title="刚体运动"></a>刚体运动</h3><h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><p>用世界坐标系原点到刚体坐标系原点的<strong>向量</strong>来表示刚体在空间中的位置和移动状态。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025210600280.png" alt="image-20221025210600280"></p><h4 id="转动"><a href="#转动" class="headerlink" title="转动"></a>转动</h4><p>用刚体坐标系在世界坐标系中的投影来表示刚体的转动状态。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025212148476.png" alt="image-20221025212148476"></p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025212225350.png" alt="image-20221025212225350"></p><p><strong>${^A_B}R$ 表示B坐标系相对A坐标系的旋转矩阵</strong></p><h4 id="旋转矩阵特性"><a href="#旋转矩阵特性" class="headerlink" title="旋转矩阵特性"></a>旋转矩阵特性</h4><ol><li><p>A对B的旋转矩阵转置既是B对A的旋转矩阵。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025214157573.png" alt="image-20221025214157573"></p></li><li><p>${^A_B}R^T{^A_B}R=I_3$ (单位矩阵)</p><p>正交矩阵有这样的特性。因此在算矩阵的逆矩阵时，可直接计算其旋转矩阵。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025214632994.png" alt="image-20221025214632994"></p></li></ol><h4 id="旋转矩阵处了描述-B-相对-A-的姿态，也可用于转换。"><a href="#旋转矩阵处了描述-B-相对-A-的姿态，也可用于转换。" class="headerlink" title="旋转矩阵处了描述{B}相对{A}的姿态，也可用于转换。"></a>旋转矩阵处了描述{B}相对{A}的姿态，也可用于转换。</h4><p>eg. 求P点在{A}和{B}两个坐标系的表达法。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025220046594.png" alt="image-20221025220046594"></p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025220104075.png" alt="image-20221025220104075"></p><h4 id="进一步描述刚体转动的状态"><a href="#进一步描述刚体转动的状态" class="headerlink" title="进一步描述刚体转动的状态"></a>进一步描述刚体转动的状态</h4><p>当坐标轴绕Z轴旋转$\theta$角度时，此时的坐标系B对A的旋转矩阵可表示为如下形式。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025221505493.png" alt="image-20221025221505493"></p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025221511975.png" alt="image-20221025221511975"></p><p>这种表示方法可以解决P点随坐标系旋转$\theta$后，相对原坐标系的位置。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025222109217.png" alt="image-20221025222109217"></p><h4 id="总结旋转矩阵的三个用法"><a href="#总结旋转矩阵的三个用法" class="headerlink" title="总结旋转矩阵的三个用法"></a>总结旋转矩阵的三个用法</h4><ol><li><p>描述一个坐标系相对另一个坐标系的姿态</p></li><li><p>求点在不同坐标系中的位置</p><p>$^AP={^A_BR}^BP$</p></li><li><p>求点在同一个坐标系中转动后的位置</p><p>$^AP’=R(\theta)^AP$</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 机器人学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器人学 </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL基础</title>
      <link href="/2022/10/25/sql-ji-chu/"/>
      <url>/2022/10/25/sql-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL简介"><a href="#SQL简介" class="headerlink" title="SQL简介"></a>SQL简介</h2><blockquote><p><strong>SQL</strong> (Structured Query Language:结构化查询语言) 是用于管理关系数据库管理系统（RDBMS）。 SQL 的范围包括数据插入、查询、更新和删除，数据库模式创建和修改，以及数据访问控制。</p></blockquote><ul><li>SQL 指结构化查询语言，全称是 Structured Query Language。</li><li>SQL 让您可以访问和处理数据库，包括数据插入、查询、更新和删除。</li><li>SQL 在1986年成为 ANSI（American National Standards Institute 美国国家标准化组织）的一项标准，在 1987 年成为国际标准化组织（ISO）标准。</li></ul><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 数据库中的字符串用单引号</span><span class="token comment">-- 查看数据库版本</span><span class="token keyword">select</span> version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 显示当前数据库</span><span class="token keyword">select</span> <span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 描述表结构 desc</span><span class="token keyword">describe</span> 表名<span class="token punctuation">;</span><span class="token comment">-- 清屏 \! :使用原有shell命令</span>linux : \<span class="token operator">!</span> clearWindows : \<span class="token operator">!</span> cls<span class="token comment">-- 启动\停止 mysql 服务</span>Windows：net <span class="token keyword">start</span> mysqlnet stop mysqlLinux：service mysqld <span class="token keyword">start</span>service mysqld stopservice mysqld restart<span class="token comment">-- 连接mysql</span>本地： mysql <span class="token operator">-</span>u root <span class="token operator">-</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="增删查改"><a href="#增删查改" class="headerlink" title="增删查改"></a><strong>增删查改</strong></h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 查询字段</span><span class="token keyword">select</span> 字段名<span class="token number">1</span><span class="token punctuation">,</span>字段<span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span class="token comment">-- 查询所有字段，\* 号效率低，或者写所有字段名</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span class="token comment">-- 给查询列起别名</span><span class="token keyword">select</span> 字段名 <span class="token keyword">as</span> 别名 <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span class="token keyword">as</span> 关键字可以省略<span class="token keyword">select</span> 字段名 别名 <span class="token keyword">from</span> 表名<span class="token punctuation">;</span>别名有空格 <span class="token keyword">select</span> 字段名 <span class="token string">'as 别名'</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span class="token comment">-- 字段可以参与数学运算</span><span class="token keyword">select</span> 字段\<span class="token operator">*</span><span class="token number">12</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span><span class="token comment">-- 条件查询</span><span class="token keyword">select</span> 字段名 <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> 表名<span class="token punctuation">;</span><span class="token comment">/* 条件 ：等于：= 不等于：&lt;&gt;与：and字段名 between 左小 and 右大或：or 查询空条件select 字段名 from 表名 where comm is none (not none);  不能用 = none*/</span><span class="token comment">-- in 相当于多个or,表示某个范围，not in 不在某个范围</span><span class="token keyword">select</span> 字段名 <span class="token keyword">from</span> 表名 <span class="token keyword">where</span> name <span class="token operator">in</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 表示<span class="token number">100</span>或<span class="token number">200</span>，不是区间<span class="token comment">-- 模糊查询关键字like   % 表示任意多个字符 ，_ 表示任意一个字符</span>delect name <span class="token keyword">from</span> name_table <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'y%'</span><span class="token punctuation">;</span> <span class="token comment">-- 表示以y开头的所有名字</span>delect name <span class="token keyword">from</span> name_table <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'_y%'</span><span class="token punctuation">;</span> <span class="token comment">-- 表示第二个字母是y的所有名字</span><span class="token keyword">select</span> name <span class="token keyword">from</span> t <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%\_%'</span><span class="token punctuation">;</span> <span class="token comment">-- 表示名字里有下划线的</span><span class="token comment">-- 排序 关键字 order by</span><span class="token keyword">select</span> 字段名 <span class="token keyword">from</span> 表名 <span class="token keyword">order</span> <span class="token keyword">by</span> 排序字段 <span class="token keyword">asc</span><span class="token punctuation">;</span> <span class="token comment">-- asc 升序 desc 降序</span><span class="token keyword">select</span> 字段名 <span class="token keyword">from</span> 表名 <span class="token keyword">order</span> <span class="token keyword">by</span> sal <span class="token keyword">asc</span><span class="token punctuation">,</span>ename <span class="token keyword">asc</span><span class="token punctuation">;</span> <span class="token comment">-- 当sal相同时，按照ename升序排</span><span class="token keyword">select</span> 字段名 <span class="token keyword">from</span> 表名 <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">-- 按照第二列排序，不建议使用</span><span class="token comment">-- 单行处理函数（数据处理函数） 一个输入对应一个输出</span><span class="token keyword">select</span> lower<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span> <span class="token comment">-- 小写   大写：upper()</span><span class="token keyword">select</span> substr<span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>  <span class="token comment">-- 截取子串，索引从1开始</span><span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token keyword">No</span><span class="token punctuation">,</span>Name<span class="token punctuation">)</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span> <span class="token comment">-- 字符串拼接</span>length<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 字符串长度</span>trim<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">-- 去字符串中的空格</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span>  <span class="token comment">-- 四舍五入,对float保留i位小数，-1 保留到10位，1保留十分位</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- 生成0-1中的随机数</span>ifnull<span class="token punctuation">(</span>num<span class="token punctuation">,</span><span class="token keyword">temp</span><span class="token punctuation">)</span>  <span class="token comment">-- 空值处理函数。若num值为空，当作temp处理。在数学运算中，若有空值，则结果位null。</span><span class="token keyword">case</span> 字段 <span class="token keyword">when</span> 值<span class="token number">1</span> <span class="token keyword">then</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">when</span> 值<span class="token number">2</span> <span class="token keyword">then</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">else</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">end</span>  <span class="token comment">-- 只起显示作用，不对数据库做修改</span><span class="token comment">-- 分组函数  输入多行，输出一行，会自动忽略null，不需要提前对null处理</span><span class="token comment">-- 若无分组，则一张表为一组</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">-- 计数  count(*) 统计结果包括null，参数为具体字段则不包括null</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">-- 求和</span><span class="token function">avg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 平均值</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">-- 分组函数不能直接使用在where子句中</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>grade <span class="token keyword">from</span> student <span class="token keyword">where</span> grade<span class="token operator">&gt;</span><span class="token function">min</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">-- 此行语句错误</span><span class="token comment">/*语句执行顺序from -&gt; where -&gt; group by -&gt; select -&gt; order bywhere 执行时还没有分组，不能执行分组函数*/</span><span class="token comment">-- 分组查询</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">select</span> subject<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token keyword">from</span> student <span class="token keyword">group</span> <span class="token keyword">by</span> subject<span class="token punctuation">;</span><span class="token comment">-- select后只能跟参加分组的字段和分组函数。</span><span class="token comment">-- 不同字段联合分组</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">group</span> <span class="token keyword">by</span> 字段一<span class="token punctuation">,</span>字段二<span class="token punctuation">;</span><span class="token comment">-- 使用having可以对分完组的数据再次过滤  效率低</span><span class="token keyword">select</span> subject<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token keyword">from</span> student <span class="token keyword">group</span> <span class="token keyword">by</span> subject <span class="token keyword">having</span> <span class="token function">max</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">60</span><span class="token punctuation">;</span><span class="token keyword">select</span> subject<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> grade<span class="token operator">&gt;</span><span class="token number">60</span> <span class="token keyword">group</span> <span class="token keyword">by</span> subject<span class="token punctuation">;</span>   <span class="token comment">-- 优先选用</span><span class="token comment">-- 去重关键字  distinct,出现在两个字段前，联合去重。</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> name <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token keyword">distinct</span> school <span class="token keyword">from</span> student<span class="token punctuation">;</span>  <span class="token comment">-- 语法错误</span><span class="token comment">-- 连接查询 多张表跨表查询 </span><span class="token comment">/* SQL92、SQL99内连接等值连接非等值连接自连接外连接左外连接（左连接）右外连接（右连接）全连接*/</span><span class="token comment">-- 多表查询不加条件会出现笛卡尔积现象，效率低</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>className <span class="token keyword">from</span> student<span class="token punctuation">,</span>class <span class="token keyword">where</span> student<span class="token punctuation">.</span>classNo<span class="token operator">=</span>class<span class="token punctuation">.</span><span class="token keyword">no</span><span class="token punctuation">;</span><span class="token keyword">select</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>className <span class="token keyword">from</span> student s<span class="token punctuation">,</span>class c <span class="token keyword">where</span> s<span class="token punctuation">.</span>classNo<span class="token operator">=</span>c<span class="token punctuation">.</span><span class="token keyword">no</span><span class="token punctuation">;</span><span class="token comment">-- 内连接-等值连接inner可省略 join</span><span class="token comment">-- SQL92</span><span class="token comment">-- select name,className from student,class where student.classNo=class.no;</span><span class="token comment">-- SQL99</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>className <span class="token keyword">from</span> student <span class="token keyword">join</span> class <span class="token keyword">on</span> student<span class="token punctuation">.</span>classNo<span class="token operator">=</span>class<span class="token punctuation">.</span><span class="token keyword">no</span><span class="token keyword">where</span>筛选条件<span class="token punctuation">;</span><span class="token comment">-- 内连接-非等值连接</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>className <span class="token keyword">from</span> student <span class="token keyword">join</span> class <span class="token keyword">on</span> student<span class="token punctuation">.</span>classNo <span class="token operator">between</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">3</span>   <span class="token comment">-- 班级号在1-3之间的</span><span class="token keyword">where</span>筛选条件<span class="token punctuation">;</span><span class="token comment">-- 内连接-自连接  一张表看做两张表</span><span class="token keyword">select</span> s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>b<span class="token punctuation">.</span>name <span class="token keyword">from</span> student s <span class="token keyword">join</span> student b <span class="token keyword">on</span> s<span class="token punctuation">.</span>banzhangNo<span class="token operator">=</span>b<span class="token punctuation">.</span><span class="token keyword">No</span><span class="token punctuation">;</span><span class="token comment">-- 外连接 以左/右表为主表，查询主表所有信息，匹配附表 right outer可省略 join</span><span class="token comment">-- 外连接-右连接</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>className <span class="token keyword">from</span> student <span class="token keyword">right</span> <span class="token keyword">join</span> class <span class="token keyword">on</span> student<span class="token punctuation">.</span>classNo<span class="token operator">=</span>class<span class="token punctuation">.</span><span class="token keyword">no</span><span class="token keyword">where</span>筛选条件<span class="token punctuation">;</span><span class="token comment">-- 全连接 两张表都是主表</span><span class="token comment">-- 子查询  嵌套的select语句</span><span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- union合并查询结果集</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">where</span> job<span class="token operator">=</span><span class="token string">"manager"</span><span class="token keyword">union</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>job <span class="token keyword">from</span> emp <span class="token keyword">where</span> job<span class="token operator">=</span><span class="token string">"salesman"</span><span class="token punctuation">;</span>  <span class="token comment">-- union 效率更高</span><span class="token comment">-- 要求结果列数相同，类型相同</span><span class="token comment">-- limit 将查询结果集中的一部风取出，通常使用在分页查询当中</span><span class="token keyword">select</span> name<span class="token punctuation">,</span>grade <span class="token keyword">from</span> student <span class="token keyword">order</span> <span class="token keyword">by</span> grade <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">-- 下标，长度</span><span class="token comment">-- limit在order by排序结果之后执行</span><span class="token comment">-- 表的创建</span><span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">(</span>    字段名 数据类型<span class="token punctuation">,</span>    字段名<span class="token punctuation">,</span>数据类型 <span class="token keyword">default</span> <span class="token string">"默认值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 快速建表</span><span class="token keyword">create</span> <span class="token keyword">table</span> student2 <span class="token keyword">as</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token comment">-- 常见数据类型</span><span class="token comment">/*varchar(255)  可变长度字符串，动态分配空间char(255) 定长字符串int(11)  整型bigint 长整型float 单精度浮点数double 双精度浮点数date 短日期datetime 长日期clob 字符大对象，最多存储4G字符串blob 二进制大对象，专门存储图片、声音、视频等*/</span><span class="token comment">-- 删除表</span><span class="token keyword">drop</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span> <span class="token comment">-- 当表不存在时报错</span><span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> student<span class="token punctuation">;</span>  <span class="token comment">-- 当表存在时删除</span><span class="token comment">-- 插入数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> 表名<span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">,</span>字段名<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>值<span class="token number">1</span><span class="token punctuation">,</span>值<span class="token number">2.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 未指定字段值为null</span><span class="token comment">-- 省略insert中的字段名，相当于字段名默认添加，须按顺序和类型</span><span class="token comment">-- insert 插入日期</span><span class="token function">format</span><span class="token punctuation">(</span>数字，<span class="token string">'格式'</span><span class="token punctuation">)</span>str_to_date<span class="token punctuation">(</span>字符串，<span class="token string">'日期格式'</span><span class="token punctuation">)</span> <span class="token comment">-- %i分 %s秒</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student<span class="token punctuation">(</span>birth<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>str_to_date<span class="token punctuation">(</span><span class="token string">'1990-10-1'</span><span class="token punctuation">,</span><span class="token string">'%Y-%M-%D'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- date_format 查询日期  可以自动类型转换</span><span class="token keyword">select</span> date_format<span class="token punctuation">(</span>birth<span class="token punctuation">,</span><span class="token string">'%Y/%M/%D'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> birth <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token comment">-- 插入多条数据</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span>name1<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>name2<span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 查询结果插入表中</span><span class="token keyword">insert</span> <span class="token keyword">into</span> student2 <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span><span class="token comment">-- datetime  %h:%i:%s</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">-- 系统当前时间</span><span class="token comment">-- 修改数据 update() 无条件修改全表</span><span class="token keyword">update</span> student <span class="token keyword">set</span> name <span class="token operator">=</span><span class="token string">'jack'</span><span class="token punctuation">,</span>birthday<span class="token operator">=</span><span class="token string">'2001-11-05'</span> <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">-- 删除数据 无条件删除全表 删除数据但数据位置不回收，可以rollback恢复，但速率慢</span><span class="token keyword">delete</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">-- 快速删除表中数据</span><span class="token keyword">truncate</span> <span class="token keyword">table</span> student<span class="token punctuation">;</span><span class="token comment">-- 物理删除，速度快，不能回滚</span><span class="token comment">-- 创建表时添加约束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程的描述与控制</title>
      <link href="/2022/10/24/jin-cheng-de-miao-shu-yu-kong-zhi/"/>
      <url>/2022/10/24/jin-cheng-de-miao-shu-yu-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>早期：进程就是一个指令序列</p><p> 引入多道程序技术后：</p><p><strong>进程实体</strong>：由程序段、数据段、PCB构成 <strong>静态</strong></p><p><strong>进程</strong>：程序的一次执行过程 <strong>动态</strong></p><h3 id="进程的组织"><a href="#进程的组织" class="headerlink" title="进程的组织"></a>进程的组织</h3><h4 id="链接方式"><a href="#链接方式" class="headerlink" title="链接方式"></a>链接方式</h4><h4 id="索引方式"><a href="#索引方式" class="headerlink" title="索引方式"></a>索引方式</h4><h3 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h3><pre class="mermaid">graph LRa[进程的特征]--&gt;b[动态性] &amp; c[并发性] &amp; d[独立性] &amp; e[异步性] &amp; f[结构性]b--&gt;g[随着程序的一次执行过程动态产生,变化和消亡]c--&gt;h[内存中有多个进程实体,各进程可并发执行]d--&gt;i[进程是能独立运行,独立获得资源,独立接受调度的基本单位]e--&gt;j[各进程按各自独立的,不可预知的速度向前推进,操作系统要提供 进程同步机制 来解决异步问题]f--&gt;k[每个进程都会配置一个PCB]</pre><h1 id="进程的状态与转换"><a href="#进程的状态与转换" class="headerlink" title="进程的状态与转换"></a>进程的状态与转换</h1><pre class="mermaid">graph LRb[状态]---c[运行状态]b---d[就绪状态]b---e[阻塞状态]b---f[创建状态]b---g[终止状态]</pre><h4 id="挂起的进程资源将会从内存调度到硬盘，但该进程的PCB一直存放在内从中，等待操作系统的调入。"><a href="#挂起的进程资源将会从内存调度到硬盘，但该进程的PCB一直存放在内从中，等待操作系统的调入。" class="headerlink" title="挂起的进程资源将会从内存调度到硬盘，但该进程的PCB一直存放在内从中，等待操作系统的调入。"></a>挂起的进程资源将会从内存调度到硬盘，但该进程的PCB一直存放在内从中，等待操作系统的调入。</h4><pre class="mermaid">graph LRh[创建态]--完成创建进程的工作--&gt;i[就绪态]h--&gt;m[就绪挂起]k--挂起--&gt;n[阻塞挂起]j--运行结束或遇到不可修复的错误--&gt;l[终止态]j--主动系统调用 请求系统资源--&gt;k[阻塞态]i--进程被调度--&gt;j[运行态]k--申请的资源被分配--&gt;ij--时间片到或处理机被抢占--&gt;ii--挂起--&gt;mm--激活--&gt;in--激活--&gt;kj--&gt;mn--事件出现--&gt;m</pre><h1 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h1><p>基本概念：进程控制就是要实现进程状态的转换。进程控制用原语实现（原语用开/关中断来实现，是一种特殊的程序，原语执行必须一气呵成，不能中断）</p><pre class="mermaid">graph LRa[相关原语]---b[进程的创建]a---c[进程的终止]a---d[进程的阻塞]a---e[进程的唤醒]a---f[进程的切换]e &amp; d ---g[阻塞和唤醒要成对出现]</pre><h1 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h1><p>概念：指进程之间的信息交换</p><p>进程通信方式：共享储存、管道通信、消息传递</p><h1 id="线程、多线程模型"><a href="#线程、多线程模型" class="headerlink" title="线程、多线程模型"></a>线程、多线程模型</h1><p>  线程的重要属性：线程是处理机调度的单位，进程是资源分配的单位。同一进程的各线程共享进程拥有的资源，同一进程内的线程切换不会导致进程切换。</p><p>线程的实现方式：用户级线程、内核级线程、组合方式</p><p>多线程模型：用户级线程向内核级线程映射方式</p><ol><li>多对一模型</li><li>一对一模型</li><li>多对多模型</li></ol><h1 id="处理机调度"><a href="#处理机调度" class="headerlink" title="处理机调度"></a>处理机调度</h1><h3 id="调度的三个层次（硬盘–内存–CPU"><a href="#调度的三个层次（硬盘–内存–CPU" class="headerlink" title="调度的三个层次（硬盘–内存–CPU)"></a>调度的三个层次（硬盘–内存–CPU)</h3><h5 id="高级调度（外存-gt-内存）"><a href="#高级调度（外存-gt-内存）" class="headerlink" title="高级调度（外存->内存）"></a>高级调度（外存-&gt;内存）</h5><p>高级调度主要指调入问题，因为调入的时机由操作系统来确定，但调出的时机必然是作业运行结束才调出。</p><h5 id="中级调度（外存-gt-内存）"><a href="#中级调度（外存-gt-内存）" class="headerlink" title="中级调度（外存->内存）"></a>中级调度（外存-&gt;内存）</h5><p>引入虚拟储存之后，可将暂时不能运行的进程调至外存等待，等到宠重新具备了运行条件且内从稍有空闲，再重新调入内存。这样提高了内存利用率和系统吞吐量。调到外存的进程状态为挂起状态。</p><h5 id="低级调度（进程调度，内存-gt-CPU）"><a href="#低级调度（进程调度，内存-gt-CPU）" class="headerlink" title="低级调度（进程调度，内存->CPU）"></a>低级调度（进程调度，内存-&gt;CPU）</h5><p>从就绪队列中选取一个进程为其分配处理机。</p><h4 id="进程调度的方式"><a href="#进程调度的方式" class="headerlink" title="进程调度的方式"></a>进程调度的方式</h4><p>抢占式和非抢占式</p><h1 id="调度算法的评价指标"><a href="#调度算法的评价指标" class="headerlink" title="调度算法的评价指标"></a>调度算法的评价指标</h1><h4 id="周转时间：作业完成时间-作业提交时间"><a href="#周转时间：作业完成时间-作业提交时间" class="headerlink" title="周转时间：作业完成时间-作业提交时间"></a>周转时间：作业完成时间-作业提交时间</h4><h4 id="平均周转时间：-frac-各作业周转时间之和-作业数"><a href="#平均周转时间：-frac-各作业周转时间之和-作业数" class="headerlink" title="平均周转时间：$\frac{各作业周转时间之和}{作业数}$"></a>平均周转时间：$\frac{各作业周转时间之和}{作业数}$</h4><h4 id="带权周转时间：-frac-作业周转时间-作业实际实际使用时间"><a href="#带权周转时间：-frac-作业周转时间-作业实际实际使用时间" class="headerlink" title="带权周转时间：$\frac{作业周转时间}{作业实际实际使用时间}$"></a>带权周转时间：$\frac{作业周转时间}{作业实际实际使用时间}$</h4><h1 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h1><h3 id="先来先服务（FCFS）"><a href="#先来先服务（FCFS）" class="headerlink" title="先来先服务（FCFS）"></a>先来先服务（FCFS）</h3><p>先到先调度，<em>非抢占式算法</em></p><p>优点：公平、算法简单</p><p>缺点：排在长作业后的短作业需要等待很长时间，对短作业不友好，带权周转时间长</p><h3 id="短作业优先（SJF）"><a href="#短作业优先（SJF）" class="headerlink" title="短作业优先（SJF）"></a>短作业优先（SJF）</h3><p><em>非抢占式算法</em>：选择先到达的运行时间最短的先调度（默认）</p><p><em>抢占式算法</em>：选择先到达的运行时间最短的先调度，若比当时运行的剩余时间更短，则抢占优先调度。</p><p>优点：平均等待、周转时间最短</p><p>缺点：对长作业不友好，会导致长作业饥饿</p><h3 id="高响应比优先（HRRN）"><a href="#高响应比优先（HRRN）" class="headerlink" title="高响应比优先（HRRN）"></a>高响应比优先（HRRN）</h3><p><em>非抢占式</em></p><p>响应比=$\frac{等待时间+要求服务时间}{要求服务时间}$&gt;=1</p><p>综合考虑等待时间和运行时间，避免长作业饥饿</p><h3 id="时间片轮转调度算法（RR）"><a href="#时间片轮转调度算法（RR）" class="headerlink" title="时间片轮转调度算法（RR）"></a>时间片轮转调度算法（RR）</h3><p><em>抢占式</em></p><p>轮流让就绪队列中的进程依次执行一个时间片，时间片不能太大或太小</p><p>优点：公平、响应快</p><p>不会导致饥饿</p><h3 id="优先级调度算法"><a href="#优先级调度算法" class="headerlink" title="优先级调度算法"></a>优先级调度算法</h3><p><em>抢占式、非抢占式</em></p><p>当优优先级相同时，先到的先上处理机。</p><p>会导致饥饿。</p><h3 id="多级反馈队列调度算法"><a href="#多级反馈队列调度算法" class="headerlink" title="多级反馈队列调度算法"></a>多级反馈队列调度算法</h3><p>对上述各种算法的折中权衡，用于进程调度</p><p><em>抢占式算法</em></p><p>设置多级就绪队列，各级队列优先级由高到低，时间片由小到大。新进程到达时先进入第一级队列，时间片结束时进入下一级队列，若在最后一级，则放入该级队列队尾。新进程优先级高，会抢占当前处理机。</p><p>优点：对各类进程相对公平（FCFS的优点）；每个新到达的进程都可以很快得到响应(RR优点)；短进程只用较少的时间就可以完成（SPF优点）；不必实际估计进程运行时间；可灵活地调整对各类进程的偏好程度。</p><p>当有短进程不断加入时，会导致下级进程饥饿。</p><h1 id="进程互斥、同步"><a href="#进程互斥、同步" class="headerlink" title="进程互斥、同步"></a>进程互斥、同步</h1><h2 id="进程互斥"><a href="#进程互斥" class="headerlink" title="进程互斥"></a>进程互斥</h2><pre class="mermaid">graph LRa[两种资源共享方式]---b[互斥共享方式]a---c[同时共享方式]b--&gt;d["一个时间段内只允许一个进程访问该资源(临界资源)"]c--&gt;e["允许“同时”访问"]</pre><p>对临界资源的互斥访问逻辑</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">do</span><span class="token punctuation">{</span>    entry section<span class="token punctuation">;</span> <span class="token comment">// 进入区，上锁</span>    critical section<span class="token punctuation">;</span> <span class="token comment">//临界区 访问</span>    exit section<span class="token punctuation">;</span> <span class="token comment">//退出区 解锁</span>    remainder section<span class="token punctuation">;</span> <span class="token comment">//剩余区 其他</span><span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>互斥访问原则：</p><ol><li>空闲让进</li><li>忙则等待</li><li>有限等待</li><li>让权等待</li></ol><h3 id="进程互斥的软件实现方法"><a href="#进程互斥的软件实现方法" class="headerlink" title="进程互斥的软件实现方法"></a>进程互斥的软件实现方法</h3><ol><li><p>单标志发</p><p>算法思想：两个进程在访问临界区后会把使用临界区的权限转交给拎一个进程。也就是说每个进程进入临界区的权限只能被另一个进程赋予。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> turn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//turn 表示当前允许进入临界区的进程号</span><span class="token comment">//p0:</span><span class="token keyword">while</span><span class="token punctuation">(</span>turn<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//进入区</span>critical section<span class="token punctuation">;</span><span class="token comment">//临界区</span>turn<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//退出区</span>remainder section<span class="token punctuation">;</span><span class="token comment">//剩余区</span><span class="token comment">//p1:</span><span class="token keyword">while</span><span class="token punctuation">(</span>turn<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>critical section<span class="token punctuation">;</span>turn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>remainder section<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特点：对临界区的访问，一定是按顺序交替进行，若p0一直不访问临界资源，则p1也一直不能访问。</p><p>存在的问题： 违背”空闲让进“原则</p></li><li><p>双标志先检查</p><p>算法思想：设置bool型数组flag[ ]，标志各个进程进入临界区的意愿。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool falg<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>falg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span><span class="token comment">// 先检查，后上锁</span><span class="token comment">//p0:</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">1</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token number">2</span>critical section<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>remainder section<span class="token punctuation">;</span><span class="token comment">//p1:</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token number">4</span>critical section<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>remainder section<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在的问题：进程执行顺序不可控，若语句执行顺序为：<code>1-&gt;3-&gt;2-&gt;4</code>，则违反”忙则等待“原则。出现这种问题的原因时进入区的”检查“和”上锁“不能一气呵成的执行。</p></li><li><p>双标志后检查</p><p>算法思想：双标志先检查的改版</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool falg<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>falg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span><span class="token comment">// 先上锁，后检查</span><span class="token comment">//p0:</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>  <span class="token number">1</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span>critical section<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>remainder section<span class="token punctuation">;</span><span class="token comment">//p1:</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token number">3</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4</span>critical section<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>remainder section<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在的问题：若按照<code>1-&gt;3-&gt;2-&gt;4</code>的顺序，p0和p1都将无法进入临界区，虽解决了”忙则等待“的问题，但是违背了”空闲让进“原则。</p></li><li><p>Peterson算法</p><p> 算法思想：当进程都争取临界区的时候，使其主动让对方先使用临界区</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool flag<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//临界区意愿，初始值为false</span><span class="token keyword">int</span> turn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//优先使用临界区的进程</span><span class="token comment">//p0:</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>turn<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>turn<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>critical section<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>reminder section<span class="token punctuation">;</span><span class="token comment">//p1:</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>turn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>turn<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>critical section<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>reminder section<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Peterson算法解决了进程互斥问题，遵循了空闲让进、忙则等待、有限等待三个原则，但是当当前进程不使用临界资源时，仍然会占用CPU进行无意义的while检查，没有遵循让权等待的原则。</p></li></ol><h3 id="进程互斥的硬件实现方法"><a href="#进程互斥的硬件实现方法" class="headerlink" title="进程互斥的硬件实现方法"></a>进程互斥的硬件实现方法</h3><ol><li><p>中断屏蔽方法</p><p>原理：利用”开/关中断指令“实现，与原语实现思想相同，当某进程开始访问临界区到访问结束都不允许被中断，也就不能发生进程切换。</p><p>优点：简单、高效</p><p>缺点：不适用多处理解，开/关中断指令只能允许在内核态，权限大，只适用于操作系统内核进程。</p></li><li><p><code>TestAndSet</code>指令</p><p>简称TS指令、TSL指令，由硬件实现，执行过程不允许被中断。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//lock表示当前临界区是否被加锁，true表示已加锁</span>bool <span class="token function">TestAndSet</span><span class="token punctuation">(</span>bool <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>    bool old<span class="token punctuation">;</span>    old<span class="token operator">=</span><span class="token operator">*</span>lock<span class="token punctuation">;</span>    <span class="token operator">*</span>lock<span class="token operator">=</span>true<span class="token punctuation">;</span>    <span class="token keyword">return</span> old<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//实现互斥算法</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">TestAndSet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临界区代码段</span>lock<span class="token operator">=</span>false<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Swap</code>指令</p><p>Swap指令，由硬件实现，执行过程不允许被中断。逻辑如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//Swap 指令的作用是交换两个变量的值</span><span class="token function">Swap</span><span class="token punctuation">(</span>bool <span class="token operator">*</span>a<span class="token punctuation">,</span>bool <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    bool temp<span class="token punctuation">;</span>    temp<span class="token operator">=</span><span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token operator">*</span>a<span class="token operator">=</span><span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token operator">*</span>b<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//算法逻辑 lock 表示当前临界区是否被加锁</span>bool old<span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>old<span class="token operator">==</span>true<span class="token punctuation">)</span>    <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">,</span><span class="token operator">&amp;</span>old<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临界区代码段</span>lock<span class="token operator">=</span>false<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h1><p><strong>信号量是一种整数或记录型的变量，用来表示系统中某资源的数量。用户可以使用操作系统提供的一原语<code>wait(S)  P(S)</code>、<code>signal(S) V(S)</code>来对信号量进行操作，从而实现进程互斥、同步问题。</strong></p><h2 id="整型信号量"><a href="#整型信号量" class="headerlink" title="整型信号量"></a>整型信号量</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> S<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//表示一个资源</span>viod <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">int</span> S<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>S<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ！！当不允许进入临界区的时候循环等待，又不能被中断，不是应该卡死在这里吗？？    S<span class="token operator">=</span>S<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> S<span class="token punctuation">)</span><span class="token punctuation">{</span>    S<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//pn:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进入临界区</span><span class="token comment">//使用临界资源</span><span class="token function">signal</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//退出临界区</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会忙等，不满足让权等待原则。</p><h2 id="记录型信号量"><a href="#记录型信号量" class="headerlink" title="记录型信号量"></a>记录型信号量</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token comment">//剩余资源数</span>    <span class="token keyword">struct</span> <span class="token class-name">process</span> <span class="token operator">*</span>L<span class="token punctuation">;</span><span class="token comment">//等待队列</span><span class="token punctuation">}</span> semaphore<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span>semaphore S<span class="token punctuation">)</span><span class="token punctuation">{</span>    S<span class="token punctuation">.</span>value<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>value<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">block</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//block原语，使该进程从运行态进入阻塞态，并挂到等待队列</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">signal</span><span class="token punctuation">(</span>semaphore S<span class="token punctuation">)</span><span class="token punctuation">{</span>    S<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>value<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">wakeup</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放资源后，还有别的进程等待资源，则使用wakeup原语唤醒一个进程使用刚才的资源，该进程从阻塞态变为就绪态</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解决忙等问题，遵循让权等待的原则。</strong></p><h1 id="信号量机制实现进程互斥、同步"><a href="#信号量机制实现进程互斥、同步" class="headerlink" title="信号量机制实现进程互斥、同步"></a>信号量机制实现进程互斥、同步</h1><h3 id="进程互斥-1"><a href="#进程互斥-1" class="headerlink" title="进程互斥"></a>进程互斥</h3><p><strong>设置临界区互斥信号量<code> mutex</code>,初值为1</strong></p><h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><p>要去顺序执行<code>代码2</code>-&gt;<code>代码4</code>，设置同步信号量S,初值为0；在前操作之后执行V(S)，在后操作之前执行P(S)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore S<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    代码<span class="token number">1</span><span class="token punctuation">;</span><span class="token function">P</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>    代码<span class="token number">2</span><span class="token punctuation">;</span>代码<span class="token number">4</span><span class="token punctuation">;</span>    <span class="token function">V</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span> 代码<span class="token number">5</span><span class="token punctuation">;</span>    代码<span class="token number">3</span><span class="token punctuation">;</span>代码<span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h1><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221023174835393.png" alt="image-20221023174835393"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore mutex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>semaphore full<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>semaphore empty<span class="token operator">=</span>n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//生产一个产品</span>        <span class="token function">wait</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//放入缓冲区</span>        <span class="token function">signal</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">wait</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//从缓冲区取走一个产品</span>        <span class="token function">signal</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用产品</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221023180440896.png" alt="image-20221023180440896"></p><h1 id="哲学家问题"><a href="#哲学家问题" class="headerlink" title="哲学家问题"></a>哲学家问题</h1><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221023181556995.png" alt="image-20221023181556995"></p><p>问题：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore chopstick<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">pi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//吃饭</span>        <span class="token function">signal</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//思考</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当每个哲学家都先拿左边再拿右边筷子时，会出现每个人只拿到左边筷子的情况，这时将会出现死锁。</p><p>解决方案：</p><ol><li><p>每次只允许四位哲学家同时拿筷子。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore chopstick<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>semaphore mutex<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">pi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">wait</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//吃饭</span>        <span class="token function">signal</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//思考</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>奇数号哲学家先拿左边筷子，再拿右边筷子，偶数号反之。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore chopstick<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">pi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">//吃饭</span>        <span class="token function">signal</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//思考</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一位哲学家拿完筷子后才允许其他人拿。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore chopstick<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>semaphore mutex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">pi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">wait</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//吃饭</span>        <span class="token function">signal</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//思考</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 进程 </tag>
            
            <tag> 并行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统概述</title>
      <link href="/2022/10/24/cao-zuo-xi-tong-gai-shu/"/>
      <url>/2022/10/24/cao-zuo-xi-tong-gai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="操作系统的概念"><a href="#操作系统的概念" class="headerlink" title="操作系统的概念"></a>操作系统的概念</h2><h3 id="操作系统的功能和目标"><a href="#操作系统的功能和目标" class="headerlink" title="操作系统的功能和目标"></a>操作系统的功能和目标</h3><h4 id="–作为系统资源的管理者"><a href="#–作为系统资源的管理者" class="headerlink" title="–作为系统资源的管理者"></a>–作为系统资源的管理者</h4><pre class="mermaid">graph LRA[作为系统资源的管理者]--&gt;B[提供的功能]A--&gt;C[目标]B--&gt;E[处理机管理]B--&gt;D[存储器管理]B--&gt;H[文件管理]B--&gt;F[设备管理]C--&gt;G["安全,高效"]</pre><h4 id="–作为用户和计算机硬件之间的接口"><a href="#–作为用户和计算机硬件之间的接口" class="headerlink" title="–作为用户和计算机硬件之间的接口"></a>–作为用户和计算机硬件之间的接口</h4><pre class="mermaid">graph LRA[作为用户和计算机硬件之间的接口]--&gt;B[提供的功能]A--&gt;C[目标]C--&gt;D[方便用户使用]B--&gt;E[命令接口]B--&gt;F[程序接口]B--&gt;G[GUI]E--&gt;H[联机命令接口]E--&gt;I[脱机命令接口]H---J[说一句做一句,说一堆做一堆]I---J</pre><h4 id="–作为最接近硬件的层次"><a href="#–作为最接近硬件的层次" class="headerlink" title="–作为最接近硬件的层次"></a>–作为最接近硬件的层次</h4><h3 id="操作系统的四个基本特征"><a href="#操作系统的四个基本特征" class="headerlink" title="操作系统的四个基本特征"></a>操作系统的四个基本特征</h3><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><p>微观上交替执行，区别于并行：同时执行</p><h4 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h4><p>共享方式：互斥共享（eg. 摄像头资源）、同时共享（宏观/微观）</p><blockquote><p>并发性与共享性互为存在条件</p></blockquote><h4 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h4><p>物理实体和逻辑实体</p><pre class="mermaid">graph LRA[虚拟技术]--&gt;B[空分复用技术,如虚拟处理器]A--&gt;C[时分复用技术,如虚拟处理器]</pre><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>并发性—&gt;异步性</p><h1 id="操作系统的发展过程"><a href="#操作系统的发展过程" class="headerlink" title="操作系统的发展过程"></a>操作系统的发展过程</h1><h3 id="手工操作阶段"><a href="#手工操作阶段" class="headerlink" title="手工操作阶段"></a>手工操作阶段</h3><p>缺点：用户独占全集、人机速度矛盾导致资源利用率极低</p><h3 id="批处理阶段–单道批处理系统"><a href="#批处理阶段–单道批处理系统" class="headerlink" title="批处理阶段–单道批处理系统"></a>批处理阶段–单道批处理系统</h3><p>优点：缓解了一定程度的人机速度矛盾，资源利用率有所提升</p><p>缺点:内存中仅能有一道程序运行，CPU大量的实践是在等待I/O完成</p><h3 id="批处理阶段–多道批处理阶段"><a href="#批处理阶段–多道批处理阶段" class="headerlink" title="批处理阶段–多道批处理阶段"></a>批处理阶段–多道批处理阶段</h3><p>操作系统正式诞生</p><p>优点：躲到程序并发执行，共享计算机资源，资源利用率大幅提升</p><p>缺点：用户响应时间长，没有人机交互功能</p><h3 id="分时操作系统"><a href="#分时操作系统" class="headerlink" title="分时操作系统"></a>分时操作系统</h3><p>优点：以时间片轮转的方式解决人机交互问题</p><p>缺点：不能优先处理一些紧急任务</p><h3 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h3><p>可以根据任务权重选择优先处理</p><h1 id="OS的运行机制和体系结构"><a href="#OS的运行机制和体系结构" class="headerlink" title="OS的运行机制和体系结构"></a>OS的运行机制和体系结构</h1><pre class="mermaid">graph LRa[OS的运行机制和体系结构]--&gt;b[运行机制]a--&gt;c[操作系统内核]a--&gt;d[操作系统的体系结构]b--&gt;e[两种指令]b--&gt;f[两种处理器状态]b--&gt;g[两种程序]c--&gt;h[时钟管理]c--&gt;i[中断处理]c--&gt;j[原语]c--&gt;k[对系统资源进行管理的功能]d--&gt;l[大内核]d--&gt;m[微内核]e--&gt;n[特权指令]e--&gt;o[非特权指令]f--&gt;p[核心态]f--&gt;q[用户态]g--&gt;r[内核程序]g--&gt;s[应用程序]k--&gt;t[进程管理]k--&gt;u[储存器管理]k--&gt;v[设备管理]n-.-pn-.-rp-.-r</pre><h3 id="操作系统的内核"><a href="#操作系统的内核" class="headerlink" title="操作系统的内核"></a>操作系统的内核</h3><p>内核时计算机配置的底层软件，是操作系统最基本、最核心的部分。</p><h1 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h1><pre class="mermaid">graph LRa[异常和中断]--&gt;b[中断机制的诞生]a--&gt;c[中断的概念和作用]a--&gt;d[中断的分类]d--&gt;e[内中断,异常]d--&gt;f[外中断]a--&gt;g[外中断的处理过程]</pre><h1 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h1><h3 id="系统调用的作用"><a href="#系统调用的作用" class="headerlink" title="系统调用的作用"></a>系统调用的作用</h3><p>应用程序通过系统调用请求操作系统的服务。系统中的各种共享资源都由操作系统统一掌管，因此在用户程序中，凡是与资源有关的操作，都必须通过系统调用的方式向操作系统提出服务请求，由操作系统代为完成。这样可以保证系统的稳定性和安全性，防止用户进行非法操作。</p><h3 id="系统调用与库函数的区别"><a href="#系统调用与库函数的区别" class="headerlink" title="系统调用与库函数的区别"></a>系统调用与库函数的区别</h3><pre class="mermaid">graph LRa[应用程序]--&gt;b[c库函数]b--&gt;d[系统调用]a--&gt;d</pre><h3 id="系统调用的背后"><a href="#系统调用的背后" class="headerlink" title="系统调用的背后"></a>系统调用的背后</h3><pre class="mermaid">graph TBa[传递系统调用参数]--&gt;b[执行陷入指令 用户态]b--&gt;c[执行系统调用相应服务程序 核心态]c--&gt;d[返回用户程序]</pre><ol><li>陷入指令实在用户态执行的，执行陷入指令之后立即引发一个内中断，从而CPU进入核心态</li><li>发出系统调用请求是在用户态，而对系统调用的相应处理在核心态下进行</li><li>陷入指令是唯一一个只能在用户态执行，而不能在核心态执行的指令</li></ol>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XFtp6提示更新无法打开</title>
      <link href="/2022/10/24/xftp6-ti-shi-geng-xin-wu-fa-da-kai/"/>
      <url>/2022/10/24/xftp6-ti-shi-geng-xin-wu-fa-da-kai/</url>
      
        <content type="html"><![CDATA[<p>Xftp是一个功能强大的<a href="https://baike.baidu.com/item/SFTP/1184182">SFTP</a>、<a href="https://baike.baidu.com/item/FTP/13839">FTP</a> 文件传输软件。我们可以用Xftp安全地在<a href="https://baike.baidu.com/item/UNIX/219943">UNIX</a>/<a href="https://baike.baidu.com/item/Linux/27050">Linux</a> 和 <a href="https://baike.baidu.com/item/Windows/165458">Windows</a> PC 之间传输文件。但是就在我今天愉快的打开XFtp的时候，突然一个弹窗</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212251184.png" alt="image-20211221225108074"></p><p>？？难道是强制更新？<img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212252971.png" alt="image-20211221225249933"></p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212255404.png" alt="image-20211221225513315"></p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212255217.png" alt="image-20211221225532182"></p><p>这升级了半天还是个6啊，再次打开</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212251184.png" alt="img"></p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212258661.png" alt="image-20211221225840621"></p><p><strong>看来得上高科技了</strong></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li><p>右击快捷方式，选择<strong>打开文件所在位置</strong>，找到XFtp安装目录</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212302895.png" alt="image-20211221230220805"></p></li><li><p>找到nslicense.dll文件</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212303207.png" alt="image-20211221230352120"></p></li><li><p>用十六/二进制编辑器打开(<a href="https://sourceforge.net/projects/madedit-mod/">MadEdit</a>)</p><p>CTRL+F查找十六进制序列<code>7F 0C 81 F9 80 33 E1 01 0F</code></p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212316555.png" alt="image-20211221231641405"></p><p>把OF 后的<code>86</code>改为<code>83</code>，保存。</p></li><li><p>OKKKKK</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212323459.png" alt="image-20211221232359275"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/2022/10/24/er-fen-cha-zhao/"/>
      <url>/2022/10/24/er-fen-cha-zhao/</url>
      
        <content type="html"><![CDATA[<p><strong>题目描述</strong></p><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><pre class="line-numbers language-reStructuredText" data-language="reStructuredText"><code class="language-reStructuredText">输入: nums = [-1,0,3,5,9,12], target = 9     输出: 4       解释: 9 出现在 nums 中并且下标为 4     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>使用条件</strong></p><ul><li>数组有序</li><li>元素唯一</li></ul><p><strong>代码实现1</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> rigth<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//区间为[left, right]</span>        <span class="token keyword">int</span> middle <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//防止溢出，等同于（left+right)/2</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>            right <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//nums[middle]已经大于target,从middle - 1开始比较</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>            left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//同上</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> middle<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码实现2</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span>vactor<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//区间为[left, right)</span>        <span class="token keyword">int</span> middle <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            right <span class="token operator">=</span> middle<span class="token punctuation">;</span><span class="token comment">// 右区间为闭，当target == nums[middle-1] 时，下一重循环不会进入，逻辑错误</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> middle<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求X的n次方</title>
      <link href="/2022/10/24/x-de-n-ci-fang/"/>
      <url>/2022/10/24/x-de-n-ci-fang/</url>
      
        <content type="html"><![CDATA[<h3 id="时间复杂度-O-n"><a href="#时间复杂度-O-n" class="headerlink" title="时间复杂度 O(n)"></a>时间复杂度 O(n)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">*=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归解法-O-n"><a href="#递归解法-O-n" class="headerlink" title="递归解法 O(n)"></a>递归解法 O(n)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归解法2-O-n"><a href="#递归解法2-O-n" class="headerlink" title="递归解法2 O(n)"></a>递归解法2 O(n)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归解法3-O-logn"><a href="#递归解法3-O-logn" class="headerlink" title="递归解法3 O(logn)"></a>递归解法3 O(logn)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 递归解法2的改进，去掉重复的计算过程</span><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        t <span class="token operator">=</span> t <span class="token operator">*</span> t <span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> t <span class="token operator">*</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 时间复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间复杂度-O(x)</title>
      <link href="/2022/10/24/shi-jian-fu-za-du/"/>
      <url>/2022/10/24/shi-jian-fu-za-du/</url>
      
        <content type="html"><![CDATA[<p><strong>大O：用来表示算法最坏情况运行时间的上界。</strong></p><h3 id="不同数据规模下时间复杂度的差异"><a href="#不同数据规模下时间复杂度的差异" class="headerlink" title="不同数据规模下时间复杂度的差异"></a>不同数据规模下时间复杂度的差异</h3><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221024161321482.png" alt="image-20221024161321482"></p><p>不同数据规模下的时间复杂度所用时间不同，所以并不是时间复杂度越低越好。</p><p>一般情况下默认数据规模足够大，此时数据量也就是常数项系数已经不起决定性作用了，所以我们说的时间复杂度都是神略常数项系数的。</p><h3 id="时间复杂度排行"><a href="#时间复杂度排行" class="headerlink" title="时间复杂度排行"></a>时间复杂度排行</h3><p><strong>仅当数据量不是非常大时：</strong></p><blockquote><p>O(1)&lt;O(logn)&lt;O(n)&lt;O(n^2^)&lt;O(n^3^)&lt;O(2^n^)</p></blockquote><h3 id="复杂表达式化简"><a href="#复杂表达式化简" class="headerlink" title="复杂表达式化简"></a>复杂表达式化简</h3><blockquote><p>$O(2n^2+10n+1000)$</p></blockquote><ul><li><p>去掉常数项：常数项并不会随着n增加而增加操作次数</p><blockquote><p>$O(2n^2+10n)$</p></blockquote></li><li><p>去掉常数系数</p><blockquote><p>$O(n^2+n)$</p></blockquote></li><li><p>只保留最高项：最高项随n增长的速率远大于其他项</p><blockquote><p>$O(n^2)$</p></blockquote></li></ul><h3 id="关于O-logn"><a href="#关于O-logn" class="headerlink" title="关于O(logn)"></a>关于O(logn)</h3><p>首先logn可以看作以任意数字为底。这里说明的其实是在时间复杂度中底数是被忽略的。原因如下：<br>$$<br>O(log_in)=O(log_ij*log_jn)<br>$$<br>由上述可见$log_ij$是个常数，可以在时间复杂度的计算中被化简。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 提交代码被拒绝</title>
      <link href="/2021/12/25/git-ti-jiao-dai-ma-bei-ju-jue/"/>
      <url>/2021/12/25/git-ti-jiao-dai-ma-bei-ju-jue/</url>
      
        <content type="html"><![CDATA[<p><code>Push to xx/master was rejected</code></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>本地代码或者文件与仓库冲突(有不相关内容)，提交被拒绝。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li><p>找到项目根目录，右键<code>Git bush here</code><br><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20211225000948416.png" alt="image-20211225000948416"></p><p><br>输入代码**<code>git pull '你的项目分支' master --allow-unrelated-histories</code>**</p><p>这行命令可以允许不相关的代码提交。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20211225001142580.png" alt="image-20211225001142580"></p><p><br>然后再push就好了。</p></li><li><p>下下策，<strong>删除远程仓库</strong>所有代码，或者<strong>新建仓库</strong>，重新提交。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/2021/12/24/markdown-yu-fa/"/>
      <url>/2021/12/24/markdown-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a>1、标题</h2><p>一级标题一个<code>#</code>，六级标题六个<code>#</code>,一共六级标题</p><p>示例：</p><ol><li><code># hello World</code></li><li><code>## hello World</code></li><li><code>## hello World</code></li><li><code>#### hello World</code></li><li><code>##### hello World</code></li><li><code>##### hello World</code></li></ol><p>渲染结果</p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20211224144621328.png" alt="image-20211224144621328"></h4><h2 id="2、加粗"><a href="#2、加粗" class="headerlink" title="2、加粗"></a>2、加粗</h2><p><code>**Hello World**</code></p><p>渲染结果：<strong>Hello World</strong></p><h2 id="3、斜体"><a href="#3、斜体" class="headerlink" title="3、斜体"></a>3、斜体</h2><p><code>*hello Word*</code></p><p>渲染结果 <em>hello World</em></p><h2 id="4、代码，代码块"><a href="#4、代码，代码块" class="headerlink" title="4、代码，代码块"></a>4、代码，代码块</h2><p>` 代码语句`</p><p>渲染结果 <code>print("Hello World")</code></p><p>```代码块```</p><p>渲染结果</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"hello World"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、分割线、删除线"><a href="#5、分割线、删除线" class="headerlink" title="5、分割线、删除线"></a>5、分割线、删除线</h2><ol><li><p><code>***</code></p><p>渲染结果</p><hr></li><li><p>~~删除线~~</p><p>渲染结果</p><p><del>删除线</del></p></li></ol><h2 id="6、超链接和图片"><a href="#6、超链接和图片" class="headerlink" title="6、超链接和图片"></a>6、超链接和图片</h2><ol><li><p>超链接</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">朝花朝拾</span>](<span class="token url">https://767879.xyz</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>渲染结果</p><p><a href="https://yjhui.xyz/">朝花朝拾</a></p></li><li><p>图片</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">![](https://gitee.com/yjhuiwa/media/raw/master/image/20211224145712.png)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>渲染结果</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/20211224145712.png"></p></li></ol><h2 id="7、列表"><a href="#7、列表" class="headerlink" title="7、列表"></a>7、列表</h2><ol><li><p>无序列表</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 第一行<span class="token list punctuation">*</span> 第二行*2.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>渲染结果</p><ul><li>第一行</li><li>第二行<ul><li>2.1</li></ul></li></ul></li><li><p>有序列表</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 第一行<span class="token list punctuation">2.</span> 第二行<span class="token list punctuation">1.</span> 2.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>渲染结果</p></li><li><p>第一行</p></li><li><p>第二行</p><ol><li>2.1</li></ol></li></ol><h2 id="8、公式-code"><a href="#8、公式-code" class="headerlink" title="8、公式($code$)"></a>8、公式($code$)</h2><ol><li><p>特殊</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 圆圈 ，用于角度   \circ<span class="token list punctuation">2.</span>  小空格 \,大空格 \quad<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>矩阵、上下标</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 矩阵 大括号\begin{matrix}a &amp;&amp; b \\c &amp;&amp; d \end{matrix}/<span class="token italic"><span class="token punctuation">*</span><span class="token content">pmatrix 圆括号bmatrix 方括号Bmatrix 大括号vmatrix 矩阵竖线Vmatrix 双竖线</span><span class="token punctuation">*</span></span>/<span class="token list punctuation">2.</span> 上下标^{A}<span class="token italic"><span class="token punctuation">_</span><span class="token content">{B}R^{C}</span><span class="token punctuation">_</span></span>{D}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>根号与分式</p><p><code>\sqrt[4]{x\over y}</code></p></li><li><p>积分</p><p><code>\int_r^\infty</code></p><p><code>\iint</code></p><p><code>\iiint</code></p></li></ol><h3 id="9、图表"><a href="#9、图表" class="headerlink" title="9、图表"></a><strong>9、图表</strong></h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">​<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mermaid<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>grapha LR  \ TBa[x]--&gt;b[XX]a--&gt;c[xx]\\其他样式--- 直线-.- 虚线​<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">graph LRa[xxx]--&gt;b[xx]a---c[x]c-.-d[xxx]</pre>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式H2数据库</title>
      <link href="/2021/12/24/qian-ru-shi-h2-shu-ju-ku/"/>
      <url>/2021/12/24/qian-ru-shi-h2-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="1、H2数据库是一个开源的关系型数据库。"><a href="#1、H2数据库是一个开源的关系型数据库。" class="headerlink" title="1、H2数据库是一个开源的关系型数据库。"></a>1、H2数据库是一个开源的关系型数据库。</h2><p>H2数据库官网：<a href="https://h2database.com/html/main.html">H2 Database Engine</a></p><p>H2是一个采用java语言编写的嵌入式数据库引擎，只是一个类库（即只有一个 jar 文件），可以直接嵌入到应用项目中，不受平台的限制。</p><h2 id="2、配置H2数据库"><a href="#2、配置H2数据库" class="headerlink" title="2、配置H2数据库"></a>2、配置H2数据库</h2><p>在JavaWeb项目中导入H2的包，并在<code>db-config</code>中配置</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20211224135251551.png" alt="image-20211224135251551"></p><p><br>这里的url是自己的自定的数据保存地址</p><h2 id="3、初始化数据库"><a href="#3、初始化数据库" class="headerlink" title="3、初始化数据库"></a>3、初始化数据库</h2><p>运行web程序后，在浏览器输入<code>http://localhost:8080/console</code>即可打开控制台</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20211224135658545.png" alt="image-20211224135658545"></p><p>点击<code>Test Connection</code>会报一个数据库找不到的错误，这里我们需要先对数据库进行初始化，初始化代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/app-init"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppInitServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">AppInitServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token comment">// 存放完成数据准备后的返回数据</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> dataInit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Statement</span> stat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>conn <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">db<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>DatabaseUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stat <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删表</span>stat<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS USER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建表</span>stat<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE USER(id INTEGER PRIMARY KEY auto_increment, username VARCHAR(255), password VARCHAR(255), timestamp TIMESTAMP)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 插入数据样例</span>stat<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO USER(username, password, timestamp) VALUES('admin', 'admin', CURRENT_TIMESTAMP())"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询全表数据</span>rs <span class="token operator">=</span> stat<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM USER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dataInit<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将初始化的数据返回</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dataInit<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">util<span class="token punctuation">.</span></span>ResponseBuilder</span><span class="token punctuation">.</span><span class="token function">createJson</span><span class="token punctuation">(</span>dataInit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">util<span class="token punctuation">.</span></span>ResponseBuilder</span><span class="token punctuation">.</span><span class="token function">createJson</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">util<span class="token punctuation">.</span></span>ResponseCode</span><span class="token punctuation">.</span><span class="token constant">SERVICE_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token class-name"><span class="token namespace">db<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>DatabaseUtil</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> stat<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中用到的<code>User</code>模型代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">main<span class="token punctuation">.</span>java<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> username<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> password<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问<code>http://localhost:8080/app-init</code>初始化我们的数据库</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20211224141037725.png" alt="image-20211224141037725"></p><p>然会再次访问<code>console</code>，打开控制台</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20211224141131989.png" alt="image-20211224141131989"></p><p>现在数据库已经可以连接了，只需要输入我们的用户名<code>root</code>和密码<code>root</code>进行连接。</p><p><strong>$\heartsuit$ 注意，数据库只在最开始初始化一次，后面每次初始化都会清除之前保存的数据。</strong></p><h2 id="3、进入控制台"><a href="#3、进入控制台" class="headerlink" title="3、进入控制台"></a>3、进入控制台</h2><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20211224141551517.png" alt="image-20211224141551517"></p><p>到这里，数据库就可以使用了。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> H2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
