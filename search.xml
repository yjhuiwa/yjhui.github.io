<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/10/23/xian-xing-biao-adt/"/>
      <url>/2022/10/23/xian-xing-biao-adt/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h2><ul><li><p>InitList(*L)：初始化，创建一个空的线性表</p></li><li><p>LIstEmpty(L)：判断线性表是否为空表</p></li><li><p>ClearList(*L)：清空线性表</p></li><li><p>GetElem(L,i,*e)：将线性表中第i个元素的值返回给e</p></li><li><p>LocateElem(L,e)：查找元素位置，0表示是失败</p></li><li><p>ListInsert(*L,i,e)：在指定位置插入元素</p></li><li><p>ListDelete(*L,i,*e)：删除第i个元素</p></li><li><p>ListLength(L)：返回元素个数</p></li></ul><h2 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h2><h3 id="结构定义"><a href="#结构定义" class="headerlink" title="结构定义"></a>结构定义</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">typedef struct{    ElemType data[MAXSIZE];    int length;}SqList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="InitList-L"><a href="#InitList-L" class="headerlink" title="InitList(*L)"></a>InitList(*L)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status InitList(SqList *L){    L-&gt;length=0;    return OK;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ListInsert-SqList-L-int-i-ElemType-e"><a href="#ListInsert-SqList-L-int-i-ElemType-e" class="headerlink" title="ListInsert(SqList *L,int i,ElemType e)"></a>ListInsert(SqList *L,int i,ElemType e)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status ListInsert(SqList *L,int i,ElemType e){    int j;    if(i&lt;1||i&gt;L-&gt;length+1)    {        printf("索引错误");        return ERROR;    }    if(L-&gt;length==MAXSIZE)    {        printf("线性表已满");        return ERROR;    }    if(i&lt;=L-&gt;lenght)    {        for(j=L-&gt;length;j=&gt;i;j++)        {            L-&gt;data[j]=L-&gt;data[j-1];        }    }    L-&gt;data[j]=e;    L-&gt;length++;    return OK;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GetElem-SqList-L-int-i-ElemType-e"><a href="#GetElem-SqList-L-int-i-ElemType-e" class="headerlink" title="GetElem(SqList L,int i,ElemType *e)"></a>GetElem(SqList L,int i,ElemType *e)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status GetElem(SqList L,int i,ElemType *e){    if(i&lt;1||i&gt;L-&gt;length||L-&gt;length==0)    {        peintf("索引错误");        return ERROR;    }    *e=L-&gt;data[i-1];    return OK;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ListDelete-SqList-L-int-i-ElemType-e"><a href="#ListDelete-SqList-L-int-i-ElemType-e" class="headerlink" title="ListDelete(SqList *L,int i,ElemType *e)"></a>ListDelete(SqList *L,int i,ElemType *e)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status ListDelete(SqList *L,int i,ElemType *e){    if(i&lt;1||i&gt;L-&gt;length||L-&gt;length==0)    {        printf("索引错误");        return ERROR;    }    *e=L-&gt;data[i-1];    while(i&lt;L-&gt;length)    {        L-&gt;data[i-1]=L-&gt;data[i++];    }    L-&gt;length--;    return OK;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ClearList-SqList-L"><a href="#ClearList-SqList-L" class="headerlink" title="ClearList(SqList *L)"></a>ClearList(SqList *L)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status ClearList(SqList *L){    L-&gt;length=0;    return OK;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><h3 id="结构定义-1"><a href="#结构定义-1" class="headerlink" title="结构定义"></a>结构定义</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">typedef struct Node{    ElemType data;    struct NOde* next;}Node;typedef struct Node* LinkList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="整表创建"><a href="#整表创建" class="headerlink" title="整表创建"></a>整表创建</h3><ol><li><p>头插法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status CreateListHead(LinkList *L,int n){    LinkList p=null;        (*L)=(Linklist)malloc(sizeof(LinkList));    (*L)-&gt;next=null;        for(int i=0;i&lt;n;i++)    {        p=(LinkList)malloc(sizeof(LinkList));        p-&gt;data=i;        p-&gt;next=(*L)-&gt;next;        (*L)-&gt;next=p;    }    return OK;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>尾插法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status CreateListTail(LinkList *L,int n){    LinkList p=null;    LinkList r=null; //尾指针        (*L)=(LinkList)malloc(sizeof(LinkList));    (*L)-&gt;next=null;        r=*L;        for(int i=0;i&lt;n;i++)    {        p=(LinkList)malloc(sizeof(LinkList));        p-&gt;data=i;        r-&gt;next=p;        r=p;    }    r-&gt;next=null;    return OK;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="整表删除"><a href="#整表删除" class="headerlink" title="整表删除"></a>整表删除</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status ClearList(LinkList *L){    linkList p=null;    LinkList q=null;    p=(*L)-&gt;next;        while(p)    {        q=p-&gt;next;        free(p);        p=q;    }    return OK;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
