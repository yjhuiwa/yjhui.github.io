<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>线性表</title>
      <link href="/2022/10/23/xian-xing-biao-adt/"/>
      <url>/2022/10/23/xian-xing-biao-adt/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><h2 id="Operation"><a href="#Operation" class="headerlink" title="Operation"></a>Operation</h2><ul><li><p>InitList(*L)：初始化，创建一个空的线性表</p></li><li><p>LIstEmpty(L)：判断线性表是否为空表</p></li><li><p>ClearList(*L)：清空线性表</p></li><li><p>GetElem(L,i,*e)：将线性表中第i个元素的值返回给e</p></li><li><p>LocateElem(L,e)：查找元素位置，0表示是失败</p></li><li><p>ListInsert(*L,i,e)：在指定位置插入元素</p></li><li><p>ListDelete(*L,i,*e)：删除第i个元素</p></li><li><p>ListLength(L)：返回元素个数</p></li></ul><h2 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h2><h3 id="结构定义"><a href="#结构定义" class="headerlink" title="结构定义"></a>结构定义</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">}</span>SqList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="InitList-L"><a href="#InitList-L" class="headerlink" title="InitList(*L)"></a>InitList(*L)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">InitList</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    L<span class="token operator">-&gt;</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ListInsert-SqList-L-int-i-ElemType-e"><a href="#ListInsert-SqList-L-int-i-ElemType-e" class="headerlink" title="ListInsert(SqList *L,int i,ElemType e)"></a>ListInsert(SqList *L,int i,ElemType e)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">ListInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">&gt;</span>L<span class="token operator">-&gt;</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"索引错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token operator">-&gt;</span>length<span class="token operator">==</span>MAXSIZE<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"线性表已满"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>L<span class="token operator">-&gt;</span>lenght<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>L<span class="token operator">-&gt;</span>length<span class="token punctuation">;</span>j<span class="token operator">=</span><span class="token operator">&gt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>    L<span class="token operator">-&gt;</span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GetElem-SqList-L-int-i-ElemType-e"><a href="#GetElem-SqList-L-int-i-ElemType-e" class="headerlink" title="GetElem(SqList L,int i,ElemType *e)"></a>GetElem(SqList L,int i,ElemType *e)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">GetElem</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">&gt;</span>L<span class="token operator">-&gt;</span>length<span class="token operator">||</span>L<span class="token operator">-&gt;</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">peintf</span><span class="token punctuation">(</span><span class="token string">"索引错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>e<span class="token operator">=</span>L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ListDelete-SqList-L-int-i-ElemType-e"><a href="#ListDelete-SqList-L-int-i-ElemType-e" class="headerlink" title="ListDelete(SqList *L,int i,ElemType *e)"></a>ListDelete(SqList *L,int i,ElemType *e)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">ListDelete</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">&gt;</span>L<span class="token operator">-&gt;</span>length<span class="token operator">||</span>L<span class="token operator">-&gt;</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"索引错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ERROR<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>e<span class="token operator">=</span>L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>L<span class="token operator">-&gt;</span>length<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    L<span class="token operator">-&gt;</span>length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ClearList-SqList-L"><a href="#ClearList-SqList-L" class="headerlink" title="ClearList(SqList *L)"></a>ClearList(SqList *L)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">ClearList</span><span class="token punctuation">(</span>SqList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    L<span class="token operator">-&gt;</span>length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><h3 id="结构定义-1"><a href="#结构定义-1" class="headerlink" title="结构定义"></a>结构定义</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">NOde</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>Node<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span> LinkList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="整表创建"><a href="#整表创建" class="headerlink" title="整表创建"></a>整表创建</h3><ol><li><p>头插法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">CreateListHead</span><span class="token punctuation">(</span>LinkList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkList p<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span>Linklist<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token operator">=</span>null<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p<span class="token operator">=</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-&gt;</span>data<span class="token operator">=</span>i<span class="token punctuation">;</span>        p<span class="token operator">-&gt;</span>next<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token operator">=</span>p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>尾插法</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">CreateListTail</span><span class="token punctuation">(</span>LinkList <span class="token operator">*</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkList p<span class="token operator">=</span>null<span class="token punctuation">;</span>    LinkList r<span class="token operator">=</span>null<span class="token punctuation">;</span> <span class="token comment">//尾指针</span>        <span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token operator">=</span>null<span class="token punctuation">;</span>        r<span class="token operator">=</span><span class="token operator">*</span>L<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p<span class="token operator">=</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-&gt;</span>data<span class="token operator">=</span>i<span class="token punctuation">;</span>        r<span class="token operator">-&gt;</span>next<span class="token operator">=</span>p<span class="token punctuation">;</span>        r<span class="token operator">=</span>p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    r<span class="token operator">-&gt;</span>next<span class="token operator">=</span>null<span class="token punctuation">;</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="整表删除"><a href="#整表删除" class="headerlink" title="整表删除"></a>整表删除</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">Status <span class="token function">ClearList</span><span class="token punctuation">(</span>LinkList <span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>    linkList p<span class="token operator">=</span>null<span class="token punctuation">;</span>    LinkList q<span class="token operator">=</span>null<span class="token punctuation">;</span>    p<span class="token operator">=</span><span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        q<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">=</span>q<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> OK<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stl基础</title>
      <link href="/2022/03/01/stl-ji-chu/"/>
      <url>/2022/03/01/stl-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="stl基础"><a href="#stl基础" class="headerlink" title="stl基础"></a>stl基础</h1><h2 id="一、string"><a href="#一、string" class="headerlink" title="一、string"></a>一、string</h2><ol><li><p>头文件<code> #include&lt;string&gt;</code></p></li><li><p>构造方法</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string s1;//初始化字符串，空字符串string s2 = s1; //拷贝初始化，深拷贝字符串string s3 = "I am Yasuo"; //直接初始化，s3存了字符串string s4(10, 'a'); //s4存的字符串是aaaaaaaaaastring s5(s4); //拷贝初始化，深拷贝字符串string s6("I am Ali"); //直接初始化string s7 = string(6, 'c'); //拷贝初始化，cccccc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用<code>cin</code>输入字符串时遇到空格会停止，如<code>cin&gt;&gt;str;</code></p><p>当输入<code>"hello  world"</code>时，<code>str</code>保存的是<code>hello</code>。可使用<code>getline(cin,str)</code>函数。</p></li><li><ol><li><p>访问每个字符。<code>str[int]</code>。</p></li><li><p>使用迭代器</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(string::iterator it=str.begin();it!=str.end();it++){    cout&lt;&lt;*it&lt;&lt;endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol></li><li><p>常用函数</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string sq("heoolo sdaa ss");cout &lt;&lt; s.find("aa", 0) &lt;&lt; endl; //返回的是子串位置。第二个参数是查找的起始位置，如果找不到，就返回string::nposif (s.find("aa1", 0) == string::npos){cout &lt;&lt; "找不到该子串！" &lt;&lt; endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> stl </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 提交代码被拒绝</title>
      <link href="/2021/12/25/git-ti-jiao-dai-ma-bei-ju-jue/"/>
      <url>/2021/12/25/git-ti-jiao-dai-ma-bei-ju-jue/</url>
      
        <content type="html"><![CDATA[<h1 id="git-提交代码被拒绝"><a href="#git-提交代码被拒绝" class="headerlink" title="git 提交代码被拒绝"></a>git 提交代码被拒绝</h1><p><code>Push to xx/master was rejected</code></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>本地代码或者文件与仓库冲突(有不相关内容)，提交被拒绝。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li><p>找到项目根目录，右键<code>Git bush here</code><br><img src="https://gitee.com/yjhuiwa/media/raw/master/image/image-20211225000948416.png" alt="image-20211225000948416"></p><p><br>输入代码**<code>git pull '你的项目分支' master --allow-unrelated-histories</code>**</p><p>这行命令可以允许不相关的代码提交。</p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/image-20211225001142580.png" alt="image-20211225001142580"></p><p><br>然后再push就好了。</p></li><li><p>下下策，<strong>删除远程仓库</strong>所有代码，或者<strong>新建仓库</strong>，重新提交。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/2021/12/24/markdown-yu-fa/"/>
      <url>/2021/12/24/markdown-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="markdown语法"><a href="#markdown语法" class="headerlink" title="markdown语法"></a>markdown语法</h1><h2 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a>1、标题</h2><p>一级标题一个<code>#</code>，六级标题六个<code>#</code>,一共六级标题</p><p>示例：</p><ol><li><code># hello World</code></li><li><code>## hello World</code></li><li><code>## hello World</code></li><li><code>#### hello World</code></li><li><code>##### hello World</code></li><li><code>##### hello World</code></li></ol><p>渲染结果</p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/yjhuiwa/media/raw/master/image/image-20211224144621328.png" alt="image-20211224144621328"></h4><h2 id="2、加粗"><a href="#2、加粗" class="headerlink" title="2、加粗"></a>2、加粗</h2><p><code>**Hello World**</code></p><p>渲染结果：<strong>Hello World</strong></p><h2 id="3、斜体"><a href="#3、斜体" class="headerlink" title="3、斜体"></a>3、斜体</h2><p><code>*hello Word*</code></p><p>渲染结果 <em>hello World</em></p><h2 id="4、代码，代码块"><a href="#4、代码，代码块" class="headerlink" title="4、代码，代码块"></a>4、代码，代码块</h2><p>` 代码语句`</p><p>渲染结果 <code>print("Hello World")</code></p><p>```代码块```</p><p>渲染结果</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;iostream&gt;using namespace std;int main(){cout&lt;&lt;"hello World"&lt;&lt;endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、分割线、删除线"><a href="#5、分割线、删除线" class="headerlink" title="5、分割线、删除线"></a>5、分割线、删除线</h2><ol><li><p><code>***</code></p><p>渲染结果</p><hr></li><li><p>~~删除线~~</p><p>渲染结果</p><p><del>删除线</del></p></li></ol><h2 id="6、超链接和图片"><a href="#6、超链接和图片" class="headerlink" title="6、超链接和图片"></a>6、超链接和图片</h2><ol><li><p>超链接</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">朝花朝拾</span>](<span class="token url">https://yjhui.xyz</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>渲染结果</p><p><a href="https://yjhui.xyz/">朝花朝拾</a></p></li><li><p>图片</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">![](https://gitee.com/yjhuiwa/media/raw/master/image/20211224145712.png)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>渲染结果</p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/20211224145712.png"></p></li></ol><h2 id="7、列表"><a href="#7、列表" class="headerlink" title="7、列表"></a>7、列表</h2><ol><li><p>无序列表</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 第一行<span class="token list punctuation">*</span> 第二行*2.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>渲染结果</p><ul><li>第一行</li><li>第二行<ul><li>2.1</li></ul></li></ul></li><li><p>有序列表</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 第一行<span class="token list punctuation">2.</span> 第二行<span class="token list punctuation">1.</span> 2.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>渲染结果</p></li><li><p>第一行</p></li><li><p>第二行</p><ol><li>2.1</li></ol></li></ol><h2 id="8、公式-code"><a href="#8、公式-code" class="headerlink" title="8、公式($code$)"></a>8、公式($code$)</h2><p><a href="https://www.jianshu.com/p/25f0139637b7">markdown中公式编辑教程 - 简书 (jianshu.com)</a></p><ol><li>上（^）下（_）标</li></ol>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式H2数据库</title>
      <link href="/2021/12/24/qian-ru-shi-h2-shu-ju-ku/"/>
      <url>/2021/12/24/qian-ru-shi-h2-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h1 id="嵌入式H2数据库"><a href="#嵌入式H2数据库" class="headerlink" title="嵌入式H2数据库"></a>嵌入式H2数据库</h1><h2 id="1、H2数据库是一个开源的关系型数据库。"><a href="#1、H2数据库是一个开源的关系型数据库。" class="headerlink" title="1、H2数据库是一个开源的关系型数据库。"></a>1、H2数据库是一个开源的关系型数据库。</h2><p>H2数据库官网：<a href="https://h2database.com/html/main.html">H2 Database Engine</a></p><p>H2是一个采用java语言编写的嵌入式数据库引擎，只是一个类库（即只有一个 jar 文件），可以直接嵌入到应用项目中，不受平台的限制。</p><h2 id="2、配置H2数据库"><a href="#2、配置H2数据库" class="headerlink" title="2、配置H2数据库"></a>2、配置H2数据库</h2><p>在JavaWeb项目中导入H2的包，并在<code>db-config</code>中配置</p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/image-20211224135251551.png" alt="image-20211224135251551"></p><p><br>这里的url是自己的自定的数据保存地址</p><h2 id="3、初始化数据库"><a href="#3、初始化数据库" class="headerlink" title="3、初始化数据库"></a>3、初始化数据库</h2><p>运行web程序后，在浏览器输入<code>http://localhost:8080/console</code>即可打开控制台</p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/image-20211224135658545.png" alt="image-20211224135658545"></p><p>点击<code>Test Connection</code>会报一个数据库找不到的错误，这里我们需要先对数据库进行初始化，初始化代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/app-init"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppInitServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">AppInitServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token comment">// 存放完成数据准备后的返回数据</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> dataInit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Statement</span> stat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>conn <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">db<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>DatabaseUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stat <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删表</span>stat<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS USER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建表</span>stat<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE USER(id INTEGER PRIMARY KEY auto_increment, username VARCHAR(255), password VARCHAR(255), timestamp TIMESTAMP)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 插入数据样例</span>stat<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO USER(username, password, timestamp) VALUES('admin', 'admin', CURRENT_TIMESTAMP())"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询全表数据</span>rs <span class="token operator">=</span> stat<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM USER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dataInit<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将初始化的数据返回</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dataInit<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">util<span class="token punctuation">.</span></span>ResponseBuilder</span><span class="token punctuation">.</span><span class="token function">createJson</span><span class="token punctuation">(</span>dataInit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">util<span class="token punctuation">.</span></span>ResponseBuilder</span><span class="token punctuation">.</span><span class="token function">createJson</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">util<span class="token punctuation">.</span></span>ResponseCode</span><span class="token punctuation">.</span><span class="token constant">SERVICE_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token class-name"><span class="token namespace">db<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>DatabaseUtil</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> stat<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中用到的<code>User</code>模型代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">main<span class="token punctuation">.</span>java<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> username<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> password<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问<code>http://localhost:8080/app-init</code>初始化我们的数据库</p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/image-20211224141037725.png" alt="image-20211224141037725"></p><p>然会再次访问<code>console</code>，打开控制台</p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/image-20211224141131989.png" alt="image-20211224141131989"></p><p>现在数据库已经可以连接了，只需要输入我们的用户名<code>root</code>和密码<code>root</code>进行连接。</p><p><strong>$\heartsuit$ 注意，数据库只在最开始初始化一次，后面每次初始化都会清除之前保存的数据。</strong></p><h2 id="3、进入控制台"><a href="#3、进入控制台" class="headerlink" title="3、进入控制台"></a>3、进入控制台</h2><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/image-20211224141551517.png" alt="image-20211224141551517"></p><p>到这里，数据库就可以使用了。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> H2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神奇的网站</title>
      <link href="/2021/12/22/shen-qi-de-wang-zhan/"/>
      <url>/2021/12/22/shen-qi-de-wang-zhan/</url>
      
        <content type="html"><![CDATA[<h1 id="神奇的网站"><a href="#神奇的网站" class="headerlink" title="神奇的网站"></a>神奇的网站</h1><h2 id="1、音频剪辑100Audio"><a href="#1、音频剪辑100Audio" class="headerlink" title="1、音频剪辑100Audio"></a>1、音频剪辑<a href="https://100audio.com/sound/100audio_editor/">100Audio</a></h2><p>100Audio Editor是一个免费的、开源的、基于web的音频和波形编辑器。</p><h2 id="2、空投快传AirPortal"><a href="#2、空投快传AirPortal" class="headerlink" title="2、空投快传AirPortal"></a>2、空投快传<a href="https://airportal.cn/">AirPortal</a></h2><p>一款设计简约的即时文件分享网站，没有繁琐的流程，也不需要下载，甚至不需要账号，你只需要打开网页，上传文件，再点击发送即可；随后系统会自动生成一个取件码，接收方只需要填写取货码并点击接收即可。就好比是一个快递柜，简单，却有效。</p><h2 id="3、视频转GIF图airmore-cn"><a href="#3、视频转GIF图airmore-cn" class="headerlink" title="3、视频转GIF图airmore.cn"></a>3、视频转GIF图<a href="https://airmore.cn/video-to-gif-online">airmore.cn</a></h2><p>将视频转换为Gif动图，快速制作表情包</p><h2 id="4、在线格式转换alltoall-net"><a href="#4、在线格式转换alltoall-net" class="headerlink" title="4、在线格式转换alltoall.net"></a>4、在线格式转换<a href="https://www.alltoall.net/">alltoall.net</a></h2><p>顾名思义，什么都能转</p><h2 id="5、格式转换Convertio"><a href="#5、格式转换Convertio" class="headerlink" title="5、格式转换Convertio"></a>5、格式转换<a href="https://convertio.co/zh/">Convertio</a></h2><p>更强大的格式转换工具，最大可支持100M大小文件格式转换，支持300+种格式</p><h2 id="6、跑马灯retiehe-com"><a href="#6、跑马灯retiehe-com" class="headerlink" title="6、跑马灯retiehe.com"></a>6、跑马灯<a href="https://tool.retiehe.com/marquee">retiehe.com</a></h2><p>就是你想的那种跑马灯</p>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> website </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XFtp6提示更新无法打开</title>
      <link href="/2021/12/21/xftp6-ti-shi-geng-xin-wu-fa-da-kai/"/>
      <url>/2021/12/21/xftp6-ti-shi-geng-xin-wu-fa-da-kai/</url>
      
        <content type="html"><![CDATA[<h1 id="XFtp6提示更新无法打开"><a href="#XFtp6提示更新无法打开" class="headerlink" title="XFtp6提示更新无法打开"></a>XFtp6提示更新无法打开</h1><p>Xftp是一个功能强大的<a href="https://baike.baidu.com/item/SFTP/1184182">SFTP</a>、<a href="https://baike.baidu.com/item/FTP/13839">FTP</a> 文件传输软件。我们可以用Xftp安全地在<a href="https://baike.baidu.com/item/UNIX/219943">UNIX</a>/<a href="https://baike.baidu.com/item/Linux/27050">Linux</a> 和 <a href="https://baike.baidu.com/item/Windows/165458">Windows</a> PC 之间传输文件。但是就在我今天愉快的打开XFtp的时候，突然一个弹窗</p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112212251184.png" alt="image-20211221225108074"></p><p>？？难道是强制更新？<img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112212252971.png" alt="image-20211221225249933"></p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112212255404.png" alt="image-20211221225513315"></p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112212255217.png" alt="image-20211221225532182"></p><p>这升级了半天还是个6啊，再次打开</p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112212251184.png" alt="img"></p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112212258661.png" alt="image-20211221225840621"></p><p><strong>看来得上高科技了</strong></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li><p>右击快捷方式，选择<strong>打开文件所在位置</strong>，找到XFtp安装目录</p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112212302895.png" alt="image-20211221230220805"></p></li><li><p>找到nslicense.dll文件</p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112212303207.png" alt="image-20211221230352120"></p></li><li><p>用十六/二进制编辑器打开(<a href="https://sourceforge.net/projects/madedit-mod/">MadEdit</a>)</p><p>CTRL+F查找十六进制序列<code>7F 0C 81 F9 80 33 E1 01 0F</code></p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112212316555.png" alt="image-20211221231641405"></p><p>把OF 后的<code>86</code>改为<code>83</code>，保存。</p></li><li><p>OKKKKK</p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112212323459.png" alt="image-20211221232359275"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用gitee和picgo搭建图床</title>
      <link href="/2021/12/18/shi-yong-gitee-he-picgo-da-jian-tu-chuang/"/>
      <url>/2021/12/18/shi-yong-gitee-he-picgo-da-jian-tu-chuang/</url>
      
        <content type="html"><![CDATA[<h1 id="使用gitee和picgo搭建图床"><a href="#使用gitee和picgo搭建图床" class="headerlink" title="使用gitee和picgo搭建图床"></a>使用gitee和picgo搭建图床</h1><h2 id="为什么要使用图床"><a href="#为什么要使用图床" class="headerlink" title="为什么要使用图床"></a>为什么要使用图床</h2><p>当我们在站点中写博客时，不可避免地要使用到图片，之前最常用地方法是先将图片上传到服务器，然后再引用图片地url,这样的方法非常繁琐，还会加重服务器负担，而且图片一多不方便管理,就像下图这样，这时，图床就应用而生，解决了这个问题。</p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112182128470.png" alt="image-20211218212845350"></p><h3 id="搭建一个免费的图床"><a href="#搭建一个免费的图床" class="headerlink" title="搭建一个免费的图床"></a>搭建一个免费的图床</h3><p>现在有很多的图床搭建方法，比如阿里的oss,七牛云等等，但阿里的oss上下行流量费用较高（土豪忽略），七牛云据说可以每月送10G储存和流量，但我实名认证时二维码扫不出来，所以放弃。最后还是使用gitee(github访问可能不稳定)。</p><h3 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h3><ol><li><p>申请注册<a href="https://gitee.com/">码云</a>账号，创建一个<strong>开源</strong>的仓库。名字随便起，但这个仓库<strong>必须有一个master分支</strong>。<img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112182136707.png" alt="image-20211218213642661"></p></li><li><p>生成token</p><p>点个人设置里的<strong>私人令牌</strong></p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112182138300.png" alt="image-20211218213826268"></p><p>随便写个描述，后面的<strong>勾选第一个</strong>，其他可以不选，然后提交，输入你的账户密码就好了</p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112182139478.png" alt="image-20211218213943435"></p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112182141798.png" alt="image-20211218214138761"></p><p>然后<strong>复制私人令牌</strong>，<strong>保存好，后面要用</strong></p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112182143022.png" alt="image-20211218214315982"></p></li><li><p>OK，现在gitee部分就好了，然后需要下载<a href="https://picgo.github.io/PicGo-Doc/zh/guide/">PicGo | PicGo</a>,这是Github的一个开源项目，只需要根据他的readme文件下载好你需要的版本，安装就好了，这里需要记得安装路径。安装好后就是这个样子。<img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112182150769.png" alt="image-20211218215011715">我们看到现在的图床里没有Gitee,莫慌，我们继续下面的操作。</p></li><li><p>安装插件</p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112182152585.png" alt="image-20211218215218536">在picgo中安装Gitee插件，<strong>如果你没有nodeJS,这里点击安装会报错</strong>，只要按照他报错时自动打开的网站下载安装即可。</p></li><li><p>配置Gitee插件<img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112182155886.png" alt="image-20211218215555835">这四个框分别填：</p><ol><li>你的仓库地址，只要gitee.com后面那部分<img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112182159276.png" alt="image-20211218215905252"></li><li>master（仓库分支，默认是master）</li><li>第二步生成的token</li><li>你将要把图片上传到的文件夹（随便写一个试试）,没有会自动创建。</li></ol></li><li><p>填好后点击<strong>设为默认图床</strong></p></li><li><p>现在就可以上传图片到你的码云上了。接下来是markdown部分。</p></li><li><p>打开Typora(如果你使用其他markdown编辑器，自行百度)，打开偏好设置。</p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112182204504.png" alt="image-20211218220449469"></p><p>如下图设置</p><p><img src="https://gitee.com/yjhuiwa/media/raw/master/image/202112182206423.png" alt="image-20211218220644366"></p><p>欧克，现在你只需要直接复制粘贴你的图片到Typora里就可以自动上传啦！</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gitee </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
