<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>机器人学导论</title>
      <link href="/2022/10/25/ji-qi-ren-xue-dao-lun/"/>
      <url>/2022/10/25/ji-qi-ren-xue-dao-lun/</url>
      
        <content type="html"><![CDATA[<h2 id="刚体运动状态描述"><a href="#刚体运动状态描述" class="headerlink" title="刚体运动状态描述"></a>刚体运动状态描述</h2><h3 id="平面上需要三个自由度去描述刚体的运动。"><a href="#平面上需要三个自由度去描述刚体的运动。" class="headerlink" title="平面上需要三个自由度去描述刚体的运动。"></a>平面上需要三个自由度去描述刚体的运动。</h3><blockquote><p>x 轴，y轴，旋转角 $\theta$</p></blockquote><h3 id="空间上需要六个自由度取描述刚体运动"><a href="#空间上需要六个自由度取描述刚体运动" class="headerlink" title="空间上需要六个自由度取描述刚体运动"></a>空间上需要六个自由度取描述刚体运动</h3><blockquote><p>x,y,z确定空间位置，$\theta、\lambda、\phi$表示空间中的三个旋转方向</p></blockquote><p>但是这样的表示方法比较复杂，所以引入世界坐标和物体坐标系，用物体坐标系的远点代表物体位置，物体坐标系相对世界坐标系的姿态表示刚体的转动状态。将刚体坐标系轨迹记录下来，然后对时间微分和二次微分即可得到刚体的速度、加速度等信息。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025210313050.png" alt="image-20221025210313050"></p><h3 id="刚体运动"><a href="#刚体运动" class="headerlink" title="刚体运动"></a>刚体运动</h3><h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><p>用世界坐标系原点到刚体坐标系原点的<strong>向量</strong>来表示刚体在空间中的位置和移动状态。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025210600280.png" alt="image-20221025210600280"></p><h4 id="转动"><a href="#转动" class="headerlink" title="转动"></a>转动</h4><p>用刚体坐标系在世界坐标系中的投影来表示刚体的转动状态。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025212148476.png" alt="image-20221025212148476"></p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025212225350.png" alt="image-20221025212225350"></p><p><strong>${^A_B}R$ 表示B坐标系相对A坐标系的旋转矩阵</strong></p><h4 id="旋转矩阵特性"><a href="#旋转矩阵特性" class="headerlink" title="旋转矩阵特性"></a>旋转矩阵特性</h4><ol><li><p>A对B的旋转矩阵转置既是B对A的旋转矩阵。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025214157573.png" alt="image-20221025214157573"></p></li><li><p>${^A_B}R^T{^A_B}R=I_3$ (单位矩阵)</p><p>正交矩阵有这样的特性。因此在算矩阵的逆矩阵时，可直接计算其旋转矩阵。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025214632994.png" alt="image-20221025214632994"></p></li></ol><h4 id="旋转矩阵处了描述-B-相对-A-的姿态，也可用于转换。"><a href="#旋转矩阵处了描述-B-相对-A-的姿态，也可用于转换。" class="headerlink" title="旋转矩阵处了描述{B}相对{A}的姿态，也可用于转换。"></a>旋转矩阵处了描述{B}相对{A}的姿态，也可用于转换。</h4><p>eg. 求P点在{A}和{B}两个坐标系的表达法。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025220046594.png" alt="image-20221025220046594"></p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025220104075.png" alt="image-20221025220104075"></p><h4 id="进一步描述刚体转动的状态"><a href="#进一步描述刚体转动的状态" class="headerlink" title="进一步描述刚体转动的状态"></a>进一步描述刚体转动的状态</h4><p>当坐标轴绕Z轴旋转$\theta$角度时，此时的坐标系B对A的旋转矩阵可表示为如下形式。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025221505493.png" alt="image-20221025221505493"></p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025221511975.png" alt="image-20221025221511975"></p><p>这种表示方法可以解决P点随坐标系旋转$\theta$后，相对原坐标系的位置。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221025222109217.png" alt="image-20221025222109217"></p><h4 id="总结旋转矩阵的三个用法"><a href="#总结旋转矩阵的三个用法" class="headerlink" title="总结旋转矩阵的三个用法"></a>总结旋转矩阵的三个用法</h4><ol><li><p>描述一个坐标系相对另一个坐标系的姿态</p></li><li><p>求点在不同坐标系中的位置</p><p>$^AP={^A_BR}^BP$</p></li><li><p>求点在同一个坐标系中转动后的位置</p><p>$^AP’=R(\theta)^AP$</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 机器人学导论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器人学导论 </tag>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL基础</title>
      <link href="/2022/10/25/sql-ji-chu/"/>
      <url>/2022/10/25/sql-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL简介"><a href="#SQL简介" class="headerlink" title="SQL简介"></a>SQL简介</h2><blockquote><p><strong>SQL</strong> (Structured Query Language:结构化查询语言) 是用于管理关系数据库管理系统（RDBMS）。 SQL 的范围包括数据插入、查询、更新和删除，数据库模式创建和修改，以及数据访问控制。</p></blockquote><ul><li>SQL 指结构化查询语言，全称是 Structured Query Language。</li><li>SQL 让您可以访问和处理数据库，包括数据插入、查询、更新和删除。</li><li>SQL 在1986年成为 ANSI（American National Standards Institute 美国国家标准化组织）的一项标准，在 1987 年成为国际标准化组织（ISO）标准。</li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 这是</span><span class="token comment">/* 注   释 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程的描述与控制</title>
      <link href="/2022/10/24/jin-cheng-de-miao-shu-yu-kong-zhi/"/>
      <url>/2022/10/24/jin-cheng-de-miao-shu-yu-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>早期：进程就是一个指令序列</p><p> 引入多道程序技术后：</p><p><strong>进程实体</strong>：由程序段、数据段、PCB构成 <strong>静态</strong></p><p><strong>进程</strong>：程序的一次执行过程 <strong>动态</strong></p><h3 id="进程的组织"><a href="#进程的组织" class="headerlink" title="进程的组织"></a>进程的组织</h3><h4 id="链接方式"><a href="#链接方式" class="headerlink" title="链接方式"></a>链接方式</h4><h4 id="索引方式"><a href="#索引方式" class="headerlink" title="索引方式"></a>索引方式</h4><h3 id="进程的特征"><a href="#进程的特征" class="headerlink" title="进程的特征"></a>进程的特征</h3><pre class="mermaid">graph LRa[进程的特征]--&gt;b[动态性] &amp; c[并发性] &amp; d[独立性] &amp; e[异步性] &amp; f[结构性]b--&gt;g[随着程序的一次执行过程动态产生,变化和消亡]c--&gt;h[内存中有多个进程实体,各进程可并发执行]d--&gt;i[进程是能独立运行,独立获得资源,独立接受调度的基本单位]e--&gt;j[各进程按各自独立的,不可预知的速度向前推进,操作系统要提供 进程同步机制 来解决异步问题]f--&gt;k[每个进程都会配置一个PCB]</pre><h1 id="进程的状态与转换"><a href="#进程的状态与转换" class="headerlink" title="进程的状态与转换"></a>进程的状态与转换</h1><pre class="mermaid">graph LRb[状态]---c[运行状态]b---d[就绪状态]b---e[阻塞状态]b---f[创建状态]b---g[终止状态]</pre><h4 id="挂起的进程资源将会从内存调度到硬盘，但该进程的PCB一直存放在内从中，等待操作系统的调入。"><a href="#挂起的进程资源将会从内存调度到硬盘，但该进程的PCB一直存放在内从中，等待操作系统的调入。" class="headerlink" title="挂起的进程资源将会从内存调度到硬盘，但该进程的PCB一直存放在内从中，等待操作系统的调入。"></a>挂起的进程资源将会从内存调度到硬盘，但该进程的PCB一直存放在内从中，等待操作系统的调入。</h4><pre class="mermaid">graph LRh[创建态]--完成创建进程的工作--&gt;i[就绪态]h--&gt;m[就绪挂起]k--挂起--&gt;n[阻塞挂起]j--运行结束或遇到不可修复的错误--&gt;l[终止态]j--主动系统调用 请求系统资源--&gt;k[阻塞态]i--进程被调度--&gt;j[运行态]k--申请的资源被分配--&gt;ij--时间片到或处理机被抢占--&gt;ii--挂起--&gt;mm--激活--&gt;in--激活--&gt;kj--&gt;mn--事件出现--&gt;m</pre><h1 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h1><p>基本概念：进程控制就是要实现进程状态的转换。进程控制用原语实现（原语用开/关中断来实现，是一种特殊的程序，原语执行必须一气呵成，不能中断）</p><pre class="mermaid">graph LRa[相关原语]---b[进程的创建]a---c[进程的终止]a---d[进程的阻塞]a---e[进程的唤醒]a---f[进程的切换]e &amp; d ---g[阻塞和唤醒要成对出现]</pre><h1 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h1><p>概念：指进程之间的信息交换</p><p>进程通信方式：共享储存、管道通信、消息传递</p><h1 id="线程、多线程模型"><a href="#线程、多线程模型" class="headerlink" title="线程、多线程模型"></a>线程、多线程模型</h1><p>  线程的重要属性：线程是处理机调度的单位，进程是资源分配的单位。同一进程的各线程共享进程拥有的资源，同一进程内的线程切换不会导致进程切换。</p><p>线程的实现方式：用户级线程、内核级线程、组合方式</p><p>多线程模型：用户级线程向内核级线程映射方式</p><ol><li>多对一模型</li><li>一对一模型</li><li>多对多模型</li></ol><h1 id="处理机调度"><a href="#处理机调度" class="headerlink" title="处理机调度"></a>处理机调度</h1><h3 id="调度的三个层次（硬盘–内存–CPU"><a href="#调度的三个层次（硬盘–内存–CPU" class="headerlink" title="调度的三个层次（硬盘–内存–CPU)"></a>调度的三个层次（硬盘–内存–CPU)</h3><h5 id="高级调度（外存-gt-内存）"><a href="#高级调度（外存-gt-内存）" class="headerlink" title="高级调度（外存->内存）"></a>高级调度（外存-&gt;内存）</h5><p>高级调度主要指调入问题，因为调入的时机由操作系统来确定，但调出的时机必然是作业运行结束才调出。</p><h5 id="中级调度（外存-gt-内存）"><a href="#中级调度（外存-gt-内存）" class="headerlink" title="中级调度（外存->内存）"></a>中级调度（外存-&gt;内存）</h5><p>引入虚拟储存之后，可将暂时不能运行的进程调至外存等待，等到宠重新具备了运行条件且内从稍有空闲，再重新调入内存。这样提高了内存利用率和系统吞吐量。调到外存的进程状态为挂起状态。</p><h5 id="低级调度（进程调度，内存-gt-CPU）"><a href="#低级调度（进程调度，内存-gt-CPU）" class="headerlink" title="低级调度（进程调度，内存->CPU）"></a>低级调度（进程调度，内存-&gt;CPU）</h5><p>从就绪队列中选取一个进程为其分配处理机。</p><h4 id="进程调度的方式"><a href="#进程调度的方式" class="headerlink" title="进程调度的方式"></a>进程调度的方式</h4><p>抢占式和非抢占式</p><h1 id="调度算法的评价指标"><a href="#调度算法的评价指标" class="headerlink" title="调度算法的评价指标"></a>调度算法的评价指标</h1><h4 id="周转时间：作业完成时间-作业提交时间"><a href="#周转时间：作业完成时间-作业提交时间" class="headerlink" title="周转时间：作业完成时间-作业提交时间"></a>周转时间：作业完成时间-作业提交时间</h4><h4 id="平均周转时间：-frac-各作业周转时间之和-作业数"><a href="#平均周转时间：-frac-各作业周转时间之和-作业数" class="headerlink" title="平均周转时间：$\frac{各作业周转时间之和}{作业数}$"></a>平均周转时间：$\frac{各作业周转时间之和}{作业数}$</h4><h4 id="带权周转时间：-frac-作业周转时间-作业实际实际使用时间"><a href="#带权周转时间：-frac-作业周转时间-作业实际实际使用时间" class="headerlink" title="带权周转时间：$\frac{作业周转时间}{作业实际实际使用时间}$"></a>带权周转时间：$\frac{作业周转时间}{作业实际实际使用时间}$</h4><h1 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h1><h3 id="先来先服务（FCFS）"><a href="#先来先服务（FCFS）" class="headerlink" title="先来先服务（FCFS）"></a>先来先服务（FCFS）</h3><p>先到先调度，<em>非抢占式算法</em></p><p>优点：公平、算法简单</p><p>缺点：排在长作业后的短作业需要等待很长时间，对短作业不友好，带权周转时间长</p><h3 id="短作业优先（SJF）"><a href="#短作业优先（SJF）" class="headerlink" title="短作业优先（SJF）"></a>短作业优先（SJF）</h3><p><em>非抢占式算法</em>：选择先到达的运行时间最短的先调度（默认）</p><p><em>抢占式算法</em>：选择先到达的运行时间最短的先调度，若比当时运行的剩余时间更短，则抢占优先调度。</p><p>优点：平均等待、周转时间最短</p><p>缺点：对长作业不友好，会导致长作业饥饿</p><h3 id="高响应比优先（HRRN）"><a href="#高响应比优先（HRRN）" class="headerlink" title="高响应比优先（HRRN）"></a>高响应比优先（HRRN）</h3><p><em>非抢占式</em></p><p>响应比=$\frac{等待时间+要求服务时间}{要求服务时间}$&gt;=1</p><p>综合考虑等待时间和运行时间，避免长作业饥饿</p><h3 id="时间片轮转调度算法（RR）"><a href="#时间片轮转调度算法（RR）" class="headerlink" title="时间片轮转调度算法（RR）"></a>时间片轮转调度算法（RR）</h3><p><em>抢占式</em></p><p>轮流让就绪队列中的进程依次执行一个时间片，时间片不能太大或太小</p><p>优点：公平、响应快</p><p>不会导致饥饿</p><h3 id="优先级调度算法"><a href="#优先级调度算法" class="headerlink" title="优先级调度算法"></a>优先级调度算法</h3><p><em>抢占式、非抢占式</em></p><p>当优优先级相同时，先到的先上处理机。</p><p>会导致饥饿。</p><h3 id="多级反馈队列调度算法"><a href="#多级反馈队列调度算法" class="headerlink" title="多级反馈队列调度算法"></a>多级反馈队列调度算法</h3><p>对上述各种算法的折中权衡，用于进程调度</p><p><em>抢占式算法</em></p><p>设置多级就绪队列，各级队列优先级由高到低，时间片由小到大。新进程到达时先进入第一级队列，时间片结束时进入下一级队列，若在最后一级，则放入该级队列队尾。新进程优先级高，会抢占当前处理机。</p><p>优点：对各类进程相对公平（FCFS的优点）；每个新到达的进程都可以很快得到响应(RR优点)；短进程只用较少的时间就可以完成（SPF优点）；不必实际估计进程运行时间；可灵活地调整对各类进程的偏好程度。</p><p>当有短进程不断加入时，会导致下级进程饥饿。</p><h1 id="进程互斥、同步"><a href="#进程互斥、同步" class="headerlink" title="进程互斥、同步"></a>进程互斥、同步</h1><h2 id="进程互斥"><a href="#进程互斥" class="headerlink" title="进程互斥"></a>进程互斥</h2><pre class="mermaid">graph LRa[两种资源共享方式]---b[互斥共享方式]a---c[同时共享方式]b--&gt;d["一个时间段内只允许一个进程访问该资源(临界资源)"]c--&gt;e["允许“同时”访问"]</pre><p>对临界资源的互斥访问逻辑</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">do</span><span class="token punctuation">{</span>    entry section<span class="token punctuation">;</span> <span class="token comment">// 进入区，上锁</span>    critical section<span class="token punctuation">;</span> <span class="token comment">//临界区 访问</span>    exit section<span class="token punctuation">;</span> <span class="token comment">//退出区 解锁</span>    remainder section<span class="token punctuation">;</span> <span class="token comment">//剩余区 其他</span><span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>互斥访问原则：</p><ol><li>空闲让进</li><li>忙则等待</li><li>有限等待</li><li>让权等待</li></ol><h3 id="进程互斥的软件实现方法"><a href="#进程互斥的软件实现方法" class="headerlink" title="进程互斥的软件实现方法"></a>进程互斥的软件实现方法</h3><ol><li><p>单标志发</p><p>算法思想：两个进程在访问临界区后会把使用临界区的权限转交给拎一个进程。也就是说每个进程进入临界区的权限只能被另一个进程赋予。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> turn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//turn 表示当前允许进入临界区的进程号</span><span class="token comment">//p0:</span><span class="token keyword">while</span><span class="token punctuation">(</span>turn<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//进入区</span>critical section<span class="token punctuation">;</span><span class="token comment">//临界区</span>turn<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//退出区</span>remainder section<span class="token punctuation">;</span><span class="token comment">//剩余区</span><span class="token comment">//p1:</span><span class="token keyword">while</span><span class="token punctuation">(</span>turn<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>critical section<span class="token punctuation">;</span>turn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>remainder section<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>特点：对临界区的访问，一定是按顺序交替进行，若p0一直不访问临界资源，则p1也一直不能访问。</p><p>存在的问题： 违背”空闲让进“原则</p></li><li><p>双标志先检查</p><p>算法思想：设置bool型数组flag[ ]，标志各个进程进入临界区的意愿。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool falg<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>falg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span><span class="token comment">// 先检查，后上锁</span><span class="token comment">//p0:</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">1</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token number">2</span>critical section<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>remainder section<span class="token punctuation">;</span><span class="token comment">//p1:</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">3</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token number">4</span>critical section<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>remainder section<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在的问题：进程执行顺序不可控，若语句执行顺序为：<code>1-&gt;3-&gt;2-&gt;4</code>，则违反”忙则等待“原则。出现这种问题的原因时进入区的”检查“和”上锁“不能一气呵成的执行。</p></li><li><p>双标志后检查</p><p>算法思想：双标志先检查的改版</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool falg<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>falg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span><span class="token comment">// 先上锁，后检查</span><span class="token comment">//p0:</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>  <span class="token number">1</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2</span>critical section<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>remainder section<span class="token punctuation">;</span><span class="token comment">//p1:</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token number">3</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">4</span>critical section<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>remainder section<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存在的问题：若按照<code>1-&gt;3-&gt;2-&gt;4</code>的顺序，p0和p1都将无法进入临界区，虽解决了”忙则等待“的问题，但是违背了”空闲让进“原则。</p></li><li><p>Peterson算法</p><p> 算法思想：当进程都争取临界区的时候，使其主动让对方先使用临界区</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool flag<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//临界区意愿，初始值为false</span><span class="token keyword">int</span> turn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//优先使用临界区的进程</span><span class="token comment">//p0:</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>turn<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>turn<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>critical section<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>reminder section<span class="token punctuation">;</span><span class="token comment">//p1:</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>turn<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>turn<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>critical section<span class="token punctuation">;</span>flag<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>reminder section<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Peterson算法解决了进程互斥问题，遵循了空闲让进、忙则等待、有限等待三个原则，但是当当前进程不使用临界资源时，仍然会占用CPU进行无意义的while检查，没有遵循让权等待的原则。</p></li></ol><h3 id="进程互斥的硬件实现方法"><a href="#进程互斥的硬件实现方法" class="headerlink" title="进程互斥的硬件实现方法"></a>进程互斥的硬件实现方法</h3><ol><li><p>中断屏蔽方法</p><p>原理：利用”开/关中断指令“实现，与原语实现思想相同，当某进程开始访问临界区到访问结束都不允许被中断，也就不能发生进程切换。</p><p>优点：简单、高效</p><p>缺点：不适用多处理解，开/关中断指令只能允许在内核态，权限大，只适用于操作系统内核进程。</p></li><li><p><code>TestAndSet</code>指令</p><p>简称TS指令、TSL指令，由硬件实现，执行过程不允许被中断。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//lock表示当前临界区是否被加锁，true表示已加锁</span>bool <span class="token function">TestAndSet</span><span class="token punctuation">(</span>bool <span class="token operator">*</span>lock<span class="token punctuation">)</span><span class="token punctuation">{</span>    bool old<span class="token punctuation">;</span>    old<span class="token operator">=</span><span class="token operator">*</span>lock<span class="token punctuation">;</span>    <span class="token operator">*</span>lock<span class="token operator">=</span>true<span class="token punctuation">;</span>    <span class="token keyword">return</span> old<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//实现互斥算法</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">TestAndSet</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临界区代码段</span>lock<span class="token operator">=</span>false<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Swap</code>指令</p><p>Swap指令，由硬件实现，执行过程不允许被中断。逻辑如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//Swap 指令的作用是交换两个变量的值</span><span class="token function">Swap</span><span class="token punctuation">(</span>bool <span class="token operator">*</span>a<span class="token punctuation">,</span>bool <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    bool temp<span class="token punctuation">;</span>    temp<span class="token operator">=</span><span class="token operator">*</span>a<span class="token punctuation">;</span>    <span class="token operator">*</span>a<span class="token operator">=</span><span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token operator">*</span>b<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//算法逻辑 lock 表示当前临界区是否被加锁</span>bool old<span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>old<span class="token operator">==</span>true<span class="token punctuation">)</span>    <span class="token function">Swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>lock<span class="token punctuation">,</span><span class="token operator">&amp;</span>old<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//临界区代码段</span>lock<span class="token operator">=</span>false<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h1><p><strong>信号量是一种整数或记录型的变量，用来表示系统中某资源的数量。用户可以使用操作系统提供的一原语<code>wait(S)  P(S)</code>、<code>signal(S) V(S)</code>来对信号量进行操作，从而实现进程互斥、同步问题。</strong></p><h2 id="整型信号量"><a href="#整型信号量" class="headerlink" title="整型信号量"></a>整型信号量</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> S<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//表示一个资源</span>viod <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">int</span> S<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>S<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ！！当不允许进入临界区的时候循环等待，又不能被中断，不是应该卡死在这里吗？？    S<span class="token operator">=</span>S<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">signal</span><span class="token punctuation">(</span><span class="token keyword">int</span> S<span class="token punctuation">)</span><span class="token punctuation">{</span>    S<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//pn:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进入临界区</span><span class="token comment">//使用临界资源</span><span class="token function">signal</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//退出临界区</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会忙等，不满足让权等待原则。</p><h2 id="记录型信号量"><a href="#记录型信号量" class="headerlink" title="记录型信号量"></a>记录型信号量</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span><span class="token comment">//剩余资源数</span>    <span class="token keyword">struct</span> <span class="token class-name">process</span> <span class="token operator">*</span>L<span class="token punctuation">;</span><span class="token comment">//等待队列</span><span class="token punctuation">}</span> semaphore<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span>semaphore S<span class="token punctuation">)</span><span class="token punctuation">{</span>    S<span class="token punctuation">.</span>value<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>value<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">block</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//block原语，使该进程从运行态进入阻塞态，并挂到等待队列</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">signal</span><span class="token punctuation">(</span>semaphore S<span class="token punctuation">)</span><span class="token punctuation">{</span>    S<span class="token punctuation">.</span>value<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>value<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">wakeup</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放资源后，还有别的进程等待资源，则使用wakeup原语唤醒一个进程使用刚才的资源，该进程从阻塞态变为就绪态</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解决忙等问题，遵循让权等待的原则。</strong></p><h1 id="信号量机制实现进程互斥、同步"><a href="#信号量机制实现进程互斥、同步" class="headerlink" title="信号量机制实现进程互斥、同步"></a>信号量机制实现进程互斥、同步</h1><h3 id="进程互斥-1"><a href="#进程互斥-1" class="headerlink" title="进程互斥"></a>进程互斥</h3><p><strong>设置临界区互斥信号量<code> mutex</code>,初值为1</strong></p><h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><p>要去顺序执行<code>代码2</code>-&gt;<code>代码4</code>，设置同步信号量S,初值为0；在前操作之后执行V(S)，在后操作之前执行P(S)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore S<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token function">p1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">p2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    代码<span class="token number">1</span><span class="token punctuation">;</span><span class="token function">P</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span>    代码<span class="token number">2</span><span class="token punctuation">;</span>代码<span class="token number">4</span><span class="token punctuation">;</span>    <span class="token function">V</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span> 代码<span class="token number">5</span><span class="token punctuation">;</span>    代码<span class="token number">3</span><span class="token punctuation">;</span>代码<span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="生产者消费者问题"><a href="#生产者消费者问题" class="headerlink" title="生产者消费者问题"></a>生产者消费者问题</h1><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221023174835393.png" alt="image-20221023174835393"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore mutex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>semaphore full<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>semaphore empty<span class="token operator">=</span>n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment">//生产一个产品</span>        <span class="token function">wait</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//放入缓冲区</span>        <span class="token function">signal</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">wait</span><span class="token punctuation">(</span>full<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//从缓冲区取走一个产品</span>        <span class="token function">signal</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>empty<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用产品</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221023180440896.png" alt="image-20221023180440896"></p><h1 id="哲学家问题"><a href="#哲学家问题" class="headerlink" title="哲学家问题"></a>哲学家问题</h1><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221023181556995.png" alt="image-20221023181556995"></p><p>问题：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore chopstick<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">pi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//吃饭</span>        <span class="token function">signal</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//思考</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当每个哲学家都先拿左边再拿右边筷子时，会出现每个人只拿到左边筷子的情况，这时将会出现死锁。</p><p>解决方案：</p><ol><li><p>每次只允许四位哲学家同时拿筷子。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore chopstick<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>semaphore mutex<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">pi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">wait</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//吃饭</span>        <span class="token function">signal</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//思考</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>奇数号哲学家先拿左边筷子，再拿右边筷子，偶数号反之。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore chopstick<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">pi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token comment">//吃饭</span>        <span class="token function">signal</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//思考</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一位哲学家拿完筷子后才允许其他人拿。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">semaphore chopstick<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>semaphore mutex<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">pi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">wait</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">wait</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>mutex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//吃饭</span>        <span class="token function">signal</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">signal</span><span class="token punctuation">(</span>chopstick<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//思考</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
            <tag> 进程 </tag>
            
            <tag> 并行 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统概述</title>
      <link href="/2022/10/24/cao-zuo-xi-tong-gai-shu/"/>
      <url>/2022/10/24/cao-zuo-xi-tong-gai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="操作系统的概念"><a href="#操作系统的概念" class="headerlink" title="操作系统的概念"></a>操作系统的概念</h2><h3 id="操作系统的功能和目标"><a href="#操作系统的功能和目标" class="headerlink" title="操作系统的功能和目标"></a>操作系统的功能和目标</h3><h4 id="–作为系统资源的管理者"><a href="#–作为系统资源的管理者" class="headerlink" title="–作为系统资源的管理者"></a>–作为系统资源的管理者</h4><pre class="mermaid">graph LRA[作为系统资源的管理者]--&gt;B[提供的功能]A--&gt;C[目标]B--&gt;E[处理机管理]B--&gt;D[存储器管理]B--&gt;H[文件管理]B--&gt;F[设备管理]C--&gt;G["安全,高效"]</pre><h4 id="–作为用户和计算机硬件之间的接口"><a href="#–作为用户和计算机硬件之间的接口" class="headerlink" title="–作为用户和计算机硬件之间的接口"></a>–作为用户和计算机硬件之间的接口</h4><pre class="mermaid">graph LRA[作为用户和计算机硬件之间的接口]--&gt;B[提供的功能]A--&gt;C[目标]C--&gt;D[方便用户使用]B--&gt;E[命令接口]B--&gt;F[程序接口]B--&gt;G[GUI]E--&gt;H[联机命令接口]E--&gt;I[脱机命令接口]H---J[说一句做一句,说一堆做一堆]I---J</pre><h4 id="–作为最接近硬件的层次"><a href="#–作为最接近硬件的层次" class="headerlink" title="–作为最接近硬件的层次"></a>–作为最接近硬件的层次</h4><h3 id="操作系统的四个基本特征"><a href="#操作系统的四个基本特征" class="headerlink" title="操作系统的四个基本特征"></a>操作系统的四个基本特征</h3><h4 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h4><p>微观上交替执行，区别于并行：同时执行</p><h4 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h4><p>共享方式：互斥共享（eg. 摄像头资源）、同时共享（宏观/微观）</p><blockquote><p>并发性与共享性互为存在条件</p></blockquote><h4 id="虚拟"><a href="#虚拟" class="headerlink" title="虚拟"></a>虚拟</h4><p>物理实体和逻辑实体</p><pre class="mermaid">graph LRA[虚拟技术]--&gt;B[空分复用技术,如虚拟处理器]A--&gt;C[时分复用技术,如虚拟处理器]</pre><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p>并发性—&gt;异步性</p><h1 id="操作系统的发展过程"><a href="#操作系统的发展过程" class="headerlink" title="操作系统的发展过程"></a>操作系统的发展过程</h1><h3 id="手工操作阶段"><a href="#手工操作阶段" class="headerlink" title="手工操作阶段"></a>手工操作阶段</h3><p>缺点：用户独占全集、人机速度矛盾导致资源利用率极低</p><h3 id="批处理阶段–单道批处理系统"><a href="#批处理阶段–单道批处理系统" class="headerlink" title="批处理阶段–单道批处理系统"></a>批处理阶段–单道批处理系统</h3><p>优点：缓解了一定程度的人机速度矛盾，资源利用率有所提升</p><p>缺点:内存中仅能有一道程序运行，CPU大量的实践是在等待I/O完成</p><h3 id="批处理阶段–多道批处理阶段"><a href="#批处理阶段–多道批处理阶段" class="headerlink" title="批处理阶段–多道批处理阶段"></a>批处理阶段–多道批处理阶段</h3><p>操作系统正式诞生</p><p>优点：躲到程序并发执行，共享计算机资源，资源利用率大幅提升</p><p>缺点：用户响应时间长，没有人机交互功能</p><h3 id="分时操作系统"><a href="#分时操作系统" class="headerlink" title="分时操作系统"></a>分时操作系统</h3><p>优点：以时间片轮转的方式解决人机交互问题</p><p>缺点：不能优先处理一些紧急任务</p><h3 id="实时操作系统"><a href="#实时操作系统" class="headerlink" title="实时操作系统"></a>实时操作系统</h3><p>可以根据任务权重选择优先处理</p><h1 id="OS的运行机制和体系结构"><a href="#OS的运行机制和体系结构" class="headerlink" title="OS的运行机制和体系结构"></a>OS的运行机制和体系结构</h1><pre class="mermaid">graph LRa[OS的运行机制和体系结构]--&gt;b[运行机制]a--&gt;c[操作系统内核]a--&gt;d[操作系统的体系结构]b--&gt;e[两种指令]b--&gt;f[两种处理器状态]b--&gt;g[两种程序]c--&gt;h[时钟管理]c--&gt;i[中断处理]c--&gt;j[原语]c--&gt;k[对系统资源进行管理的功能]d--&gt;l[大内核]d--&gt;m[微内核]e--&gt;n[特权指令]e--&gt;o[非特权指令]f--&gt;p[核心态]f--&gt;q[用户态]g--&gt;r[内核程序]g--&gt;s[应用程序]k--&gt;t[进程管理]k--&gt;u[储存器管理]k--&gt;v[设备管理]n-.-pn-.-rp-.-r</pre><h3 id="操作系统的内核"><a href="#操作系统的内核" class="headerlink" title="操作系统的内核"></a>操作系统的内核</h3><p>内核时计算机配置的底层软件，是操作系统最基本、最核心的部分。</p><h1 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h1><pre class="mermaid">graph LRa[异常和中断]--&gt;b[中断机制的诞生]a--&gt;c[中断的概念和作用]a--&gt;d[中断的分类]d--&gt;e[内中断,异常]d--&gt;f[外中断]a--&gt;g[外中断的处理过程]</pre><h1 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h1><h3 id="系统调用的作用"><a href="#系统调用的作用" class="headerlink" title="系统调用的作用"></a>系统调用的作用</h3><p>应用程序通过系统调用请求操作系统的服务。系统中的各种共享资源都由操作系统统一掌管，因此在用户程序中，凡是与资源有关的操作，都必须通过系统调用的方式向操作系统提出服务请求，由操作系统代为完成。这样可以保证系统的稳定性和安全性，防止用户进行非法操作。</p><h3 id="系统调用与库函数的区别"><a href="#系统调用与库函数的区别" class="headerlink" title="系统调用与库函数的区别"></a>系统调用与库函数的区别</h3><pre class="mermaid">graph LRa[应用程序]--&gt;b[c库函数]b--&gt;d[系统调用]a--&gt;d</pre><h3 id="系统调用的背后"><a href="#系统调用的背后" class="headerlink" title="系统调用的背后"></a>系统调用的背后</h3><pre class="mermaid">graph TBa[传递系统调用参数]--&gt;b[执行陷入指令 用户态]b--&gt;c[执行系统调用相应服务程序 核心态]c--&gt;d[返回用户程序]</pre><ol><li>陷入指令实在用户态执行的，执行陷入指令之后立即引发一个内中断，从而CPU进入核心态</li><li>发出系统调用请求是在用户态，而对系统调用的相应处理在核心态下进行</li><li>陷入指令是唯一一个只能在用户态执行，而不能在核心态执行的指令</li></ol>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XFtp6提示更新无法打开</title>
      <link href="/2022/10/24/xftp6-ti-shi-geng-xin-wu-fa-da-kai/"/>
      <url>/2022/10/24/xftp6-ti-shi-geng-xin-wu-fa-da-kai/</url>
      
        <content type="html"><![CDATA[<p>Xftp是一个功能强大的<a href="https://baike.baidu.com/item/SFTP/1184182">SFTP</a>、<a href="https://baike.baidu.com/item/FTP/13839">FTP</a> 文件传输软件。我们可以用Xftp安全地在<a href="https://baike.baidu.com/item/UNIX/219943">UNIX</a>/<a href="https://baike.baidu.com/item/Linux/27050">Linux</a> 和 <a href="https://baike.baidu.com/item/Windows/165458">Windows</a> PC 之间传输文件。但是就在我今天愉快的打开XFtp的时候，突然一个弹窗</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212251184.png" alt="image-20211221225108074"></p><p>？？难道是强制更新？<img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212252971.png" alt="image-20211221225249933"></p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212255404.png" alt="image-20211221225513315"></p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212255217.png" alt="image-20211221225532182"></p><p>这升级了半天还是个6啊，再次打开</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212251184.png" alt="img"></p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212258661.png" alt="image-20211221225840621"></p><p><strong>看来得上高科技了</strong></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li><p>右击快捷方式，选择<strong>打开文件所在位置</strong>，找到XFtp安装目录</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212302895.png" alt="image-20211221230220805"></p></li><li><p>找到nslicense.dll文件</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212303207.png" alt="image-20211221230352120"></p></li><li><p>用十六/二进制编辑器打开(<a href="https://sourceforge.net/projects/madedit-mod/">MadEdit</a>)</p><p>CTRL+F查找十六进制序列<code>7F 0C 81 F9 80 33 E1 01 0F</code></p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212316555.png" alt="image-20211221231641405"></p><p>把OF 后的<code>86</code>改为<code>83</code>，保存。</p></li><li><p>OKKKKK</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/202112212323459.png" alt="image-20211221232359275"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/2022/10/24/er-fen-cha-zhao/"/>
      <url>/2022/10/24/er-fen-cha-zhao/</url>
      
        <content type="html"><![CDATA[<p><strong>题目描述</strong></p><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><pre class="line-numbers language-reStructuredText" data-language="reStructuredText"><code class="language-reStructuredText">输入: nums = [-1,0,3,5,9,12], target = 9     输出: 4       解释: 9 出现在 nums 中并且下标为 4     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>使用条件</strong></p><ul><li>数组有序</li><li>元素唯一</li></ul><p><strong>代码实现1</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;=</span> rigth<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//区间为[left, right]</span>        <span class="token keyword">int</span> middle <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">//防止溢出，等同于（left+right)/2</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>            right <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//nums[middle]已经大于target,从middle - 1开始比较</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>            left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//同上</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> middle<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代码实现2</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span>vactor<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//区间为[left, right)</span>        <span class="token keyword">int</span> middle <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&gt;</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            left <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            right <span class="token operator">=</span> middle<span class="token punctuation">;</span><span class="token comment">// 右区间为闭，当target == nums[middle-1] 时，下一重循环不会进入，逻辑错误</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> middle<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>求X的n次方</title>
      <link href="/2022/10/24/x-de-n-ci-fang/"/>
      <url>/2022/10/24/x-de-n-ci-fang/</url>
      
        <content type="html"><![CDATA[<h3 id="时间复杂度-O-n"><a href="#时间复杂度-O-n" class="headerlink" title="时间复杂度 O(n)"></a>时间复杂度 O(n)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">*=</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归解法-O-n"><a href="#递归解法-O-n" class="headerlink" title="递归解法 O(n)"></a>递归解法 O(n)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归解法2-O-n"><a href="#递归解法2-O-n" class="headerlink" title="递归解法2 O(n)"></a>递归解法2 O(n)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归解法3-O-logn"><a href="#递归解法3-O-logn" class="headerlink" title="递归解法3 O(logn)"></a>递归解法3 O(logn)</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 递归解法2的改进，去掉重复的计算过程</span><span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        t <span class="token operator">=</span> t <span class="token operator">*</span> t <span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> t <span class="token operator">*</span> t<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 时间复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间复杂度-O(x)</title>
      <link href="/2022/10/24/shi-jian-fu-za-du/"/>
      <url>/2022/10/24/shi-jian-fu-za-du/</url>
      
        <content type="html"><![CDATA[<p><strong>大O：用来表示算法最坏情况运行时间的上界。</strong></p><h3 id="不同数据规模下时间复杂度的差异"><a href="#不同数据规模下时间复杂度的差异" class="headerlink" title="不同数据规模下时间复杂度的差异"></a>不同数据规模下时间复杂度的差异</h3><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20221024161321482.png" alt="image-20221024161321482"></p><p>不同数据规模下的时间复杂度所用时间不同，所以并不是时间复杂度越低越好。</p><p>一般情况下默认数据规模足够大，此时数据量也就是常数项系数已经不起决定性作用了，所以我们说的时间复杂度都是神略常数项系数的。</p><h3 id="时间复杂度排行"><a href="#时间复杂度排行" class="headerlink" title="时间复杂度排行"></a>时间复杂度排行</h3><p><strong>仅当数据量不是非常大时：</strong></p><blockquote><p>O(1)&lt;O(logn)&lt;O(n)&lt;O(n^2^)&lt;O(n^3^)&lt;O(2^n^)</p></blockquote><h3 id="复杂表达式化简"><a href="#复杂表达式化简" class="headerlink" title="复杂表达式化简"></a>复杂表达式化简</h3><blockquote><p>$O(2n^2+10n+1000)$</p></blockquote><ul><li><p>去掉常数项：常数项并不会随着n增加而增加操作次数</p><blockquote><p>$O(2n^2+10n)$</p></blockquote></li><li><p>去掉常数系数</p><blockquote><p>$O(n^2+n)$</p></blockquote></li><li><p>只保留最高项：最高项随n增长的速率远大于其他项</p><blockquote><p>$O(n^2)$</p></blockquote></li></ul><h3 id="关于O-logn"><a href="#关于O-logn" class="headerlink" title="关于O(logn)"></a>关于O(logn)</h3><p>首先logn可以看作以任意数字为底。这里说明的其实是在时间复杂度中底数是被忽略的。原因如下：<br>$$<br>O(log_in)=O(log_ij*log_jn)<br>$$<br>由上述可见$log_ij$是个常数，可以在时间复杂度的计算中被化简。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 时间复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 提交代码被拒绝</title>
      <link href="/2021/12/25/git-ti-jiao-dai-ma-bei-ju-jue/"/>
      <url>/2021/12/25/git-ti-jiao-dai-ma-bei-ju-jue/</url>
      
        <content type="html"><![CDATA[<p><code>Push to xx/master was rejected</code></p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>本地代码或者文件与仓库冲突(有不相关内容)，提交被拒绝。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li><p>找到项目根目录，右键<code>Git bush here</code><br><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20211225000948416.png" alt="image-20211225000948416"></p><p><br>输入代码**<code>git pull '你的项目分支' master --allow-unrelated-histories</code>**</p><p>这行命令可以允许不相关的代码提交。</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20211225001142580.png" alt="image-20211225001142580"></p><p><br>然后再push就好了。</p></li><li><p>下下策，<strong>删除远程仓库</strong>所有代码，或者<strong>新建仓库</strong>，重新提交。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> error </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/2021/12/24/markdown-yu-fa/"/>
      <url>/2021/12/24/markdown-yu-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a>1、标题</h2><p>一级标题一个<code>#</code>，六级标题六个<code>#</code>,一共六级标题</p><p>示例：</p><ol><li><code># hello World</code></li><li><code>## hello World</code></li><li><code>## hello World</code></li><li><code>#### hello World</code></li><li><code>##### hello World</code></li><li><code>##### hello World</code></li></ol><p>渲染结果</p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20211224144621328.png" alt="image-20211224144621328"></h4><h2 id="2、加粗"><a href="#2、加粗" class="headerlink" title="2、加粗"></a>2、加粗</h2><p><code>**Hello World**</code></p><p>渲染结果：<strong>Hello World</strong></p><h2 id="3、斜体"><a href="#3、斜体" class="headerlink" title="3、斜体"></a>3、斜体</h2><p><code>*hello Word*</code></p><p>渲染结果 <em>hello World</em></p><h2 id="4、代码，代码块"><a href="#4、代码，代码块" class="headerlink" title="4、代码，代码块"></a>4、代码，代码块</h2><p>` 代码语句`</p><p>渲染结果 <code>print("Hello World")</code></p><p>```代码块```</p><p>渲染结果</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>using namespace std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"hello World"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5、分割线、删除线"><a href="#5、分割线、删除线" class="headerlink" title="5、分割线、删除线"></a>5、分割线、删除线</h2><ol><li><p><code>***</code></p><p>渲染结果</p><hr></li><li><p>~~删除线~~</p><p>渲染结果</p><p><del>删除线</del></p></li></ol><h2 id="6、超链接和图片"><a href="#6、超链接和图片" class="headerlink" title="6、超链接和图片"></a>6、超链接和图片</h2><ol><li><p>超链接</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">朝花朝拾</span>](<span class="token url">https://767879.xyz</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>渲染结果</p><p><a href="https://yjhui.xyz/">朝花朝拾</a></p></li><li><p>图片</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">![](https://gitee.com/yjhuiwa/media/raw/master/image/20211224145712.png)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>渲染结果</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/20211224145712.png"></p></li></ol><h2 id="7、列表"><a href="#7、列表" class="headerlink" title="7、列表"></a>7、列表</h2><ol><li><p>无序列表</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">*</span> 第一行<span class="token list punctuation">*</span> 第二行*2.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>渲染结果</p><ul><li>第一行</li><li>第二行<ul><li>2.1</li></ul></li></ul></li><li><p>有序列表</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 第一行<span class="token list punctuation">2.</span> 第二行<span class="token list punctuation">1.</span> 2.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>渲染结果</p></li><li><p>第一行</p></li><li><p>第二行</p><ol><li>2.1</li></ol></li></ol><h2 id="8、公式-code"><a href="#8、公式-code" class="headerlink" title="8、公式($code$)"></a>8、公式($code$)</h2><p><a href="https://www.jianshu.com/p/25f0139637b7">markdown中公式编辑教程 - 简书 (jianshu.com)</a></p><ol><li>上（^）下（_）标</li></ol>]]></content>
      
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式H2数据库</title>
      <link href="/2021/12/24/qian-ru-shi-h2-shu-ju-ku/"/>
      <url>/2021/12/24/qian-ru-shi-h2-shu-ju-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="1、H2数据库是一个开源的关系型数据库。"><a href="#1、H2数据库是一个开源的关系型数据库。" class="headerlink" title="1、H2数据库是一个开源的关系型数据库。"></a>1、H2数据库是一个开源的关系型数据库。</h2><p>H2数据库官网：<a href="https://h2database.com/html/main.html">H2 Database Engine</a></p><p>H2是一个采用java语言编写的嵌入式数据库引擎，只是一个类库（即只有一个 jar 文件），可以直接嵌入到应用项目中，不受平台的限制。</p><h2 id="2、配置H2数据库"><a href="#2、配置H2数据库" class="headerlink" title="2、配置H2数据库"></a>2、配置H2数据库</h2><p>在JavaWeb项目中导入H2的包，并在<code>db-config</code>中配置</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20211224135251551.png" alt="image-20211224135251551"></p><p><br>这里的url是自己的自定的数据保存地址</p><h2 id="3、初始化数据库"><a href="#3、初始化数据库" class="headerlink" title="3、初始化数据库"></a>3、初始化数据库</h2><p>运行web程序后，在浏览器输入<code>http://localhost:8080/console</code>即可打开控制台</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20211224135658545.png" alt="image-20211224135658545"></p><p>点击<code>Test Connection</code>会报一个数据库找不到的错误，这里我们需要先对数据库进行初始化，初始化代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/app-init"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppInitServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">AppInitServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token comment">// 存放完成数据准备后的返回数据</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> dataInit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">Statement</span> stat <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">ResultSet</span> rs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>conn <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">db<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>DatabaseUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stat <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删表</span>stat<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"DROP TABLE IF EXISTS USER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建表</span>stat<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"CREATE TABLE USER(id INTEGER PRIMARY KEY auto_increment, username VARCHAR(255), password VARCHAR(255), timestamp TIMESTAMP)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 插入数据样例</span>stat<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO USER(username, password, timestamp) VALUES('admin', 'admin', CURRENT_TIMESTAMP())"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询全表数据</span>rs <span class="token operator">=</span> stat<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM USER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dataInit<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将初始化的数据返回</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dataInit<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">util<span class="token punctuation">.</span></span>ResponseBuilder</span><span class="token punctuation">.</span><span class="token function">createJson</span><span class="token punctuation">(</span>dataInit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">util<span class="token punctuation">.</span></span>ResponseBuilder</span><span class="token punctuation">.</span><span class="token function">createJson</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">util<span class="token punctuation">.</span></span>ResponseCode</span><span class="token punctuation">.</span><span class="token constant">SERVICE_ERROR</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token class-name"><span class="token namespace">db<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>DatabaseUtil</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>rs<span class="token punctuation">,</span> stat<span class="token punctuation">,</span> conn<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span><span class="token function">doGet</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中用到的<code>User</code>模型代码如下</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">main<span class="token punctuation">.</span>java<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> username<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> password<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问<code>http://localhost:8080/app-init</code>初始化我们的数据库</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20211224141037725.png" alt="image-20211224141037725"></p><p>然会再次访问<code>console</code>，打开控制台</p><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20211224141131989.png" alt="image-20211224141131989"></p><p>现在数据库已经可以连接了，只需要输入我们的用户名<code>root</code>和密码<code>root</code>进行连接。</p><p><strong>$\heartsuit$ 注意，数据库只在最开始初始化一次，后面每次初始化都会清除之前保存的数据。</strong></p><h2 id="3、进入控制台"><a href="#3、进入控制台" class="headerlink" title="3、进入控制台"></a>3、进入控制台</h2><p><img src="https://yjhui.oss-cn-qingdao.aliyuncs.com/img/image-20211224141551517.png" alt="image-20211224141551517"></p><p>到这里，数据库就可以使用了。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> H2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
